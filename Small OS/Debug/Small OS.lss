
Small OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  00800060  00800060  00001168  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001efb  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd3  00000000  00000000  0000332f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001429  00000000  00000000  00004002  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000624  00000000  00000000  0000542c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bf1  00000000  00000000  00005a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001961  00000000  00000000  00006641  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00007fa2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
       4:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__vector_1>
       8:	0c 94 95 03 	jmp	0x72a	; 0x72a <__vector_2>
       c:	0c 94 be 03 	jmp	0x77c	; 0x77c <__vector_3>
      10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      18:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__vector_6>
      1c:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_7>
      20:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_8>
      24:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__vector_9>
      28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      54:	f3 00       	.word	0x00f3	; ????
      56:	fa 00       	.word	0x00fa	; ????
      58:	01 01       	movw	r0, r2
      5a:	08 01       	movw	r0, r16
      5c:	0f 01       	movw	r0, r30
      5e:	16 01       	movw	r2, r12
      60:	1d 01       	movw	r2, r26
      62:	24 01       	movw	r4, r8
      64:	35 01       	movw	r6, r10
      66:	3c 01       	movw	r6, r24
      68:	43 01       	movw	r8, r6
      6a:	4a 01       	movw	r8, r20
      6c:	51 01       	movw	r10, r2
      6e:	58 01       	movw	r10, r16
      70:	5f 01       	movw	r10, r30
      72:	66 01       	movw	r12, r12
      74:	77 01       	movw	r14, r14
      76:	7d 01       	movw	r14, r26
      78:	83 01       	movw	r16, r6
      7a:	89 01       	movw	r16, r18
      7c:	8f 01       	movw	r16, r30
      7e:	95 01       	movw	r18, r10
      80:	9b 01       	movw	r18, r22
      82:	a1 01       	movw	r20, r2

00000084 <__ctors_end>:
      84:	11 24       	eor	r1, r1
      86:	1f be       	out	0x3f, r1	; 63
      88:	cf e5       	ldi	r28, 0x5F	; 95
      8a:	d8 e0       	ldi	r29, 0x08	; 8
      8c:	de bf       	out	0x3e, r29	; 62
      8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_clear_bss>:
      90:	20 e0       	ldi	r18, 0x00	; 0
      92:	a0 e6       	ldi	r26, 0x60	; 96
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
      98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
      9a:	aa 3c       	cpi	r26, 0xCA	; 202
      9c:	b2 07       	cpc	r27, r18
      9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>
      a0:	0e 94 b3 01 	call	0x366	; 0x366 <main>
      a4:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <_exit>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <APP_startSOS>:
 Output: void
 Description: Function to Start the Operating System. 
*/
void APP_startSOS      ( void )
{
	u8_g_startFlag = APP_U8_FLAG_UP;
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <u8_g_startFlag>
      b2:	08 95       	ret

000000b4 <APP_stopSOS>:
 Output: void
 Description: Function to Stop the Operating System.
*/
void APP_stopSOS       ( void )
{
	SOS_disable();
      b4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SOS_disable>
      b8:	08 95       	ret

000000ba <APP_taskToggleLED0>:
 Output: void
 Description: Function to Stop the car. 
*/
void APP_taskToggleLED0( void )
{
	LED_setLEDPin( LED_U8_0, LED_U8_TOGGLE );
      ba:	62 e0       	ldi	r22, 0x02	; 2
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_setLEDPin>
      c2:	08 95       	ret

000000c4 <APP_taskToggleLED1>:
 Output: void
 Description: Function to Stop the car. 
*/
void APP_taskToggleLED1( void )
{
	LED_setLEDPin( LED_U8_1, LED_U8_TOGGLE );
      c4:	62 e0       	ldi	r22, 0x02	; 2
      c6:	81 e0       	ldi	r24, 0x01	; 1
      c8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_setLEDPin>
      cc:	08 95       	ret

000000ce <APP_initialization>:
 Description: Function to Initialize the Application.
*/ 
void APP_initialization(void)
{
	/* HAL Initialization */
	BTN_initializationEXIMode( BTN_U8_EXI_0, BTN_U8_EXI_SENSE_FALLING_EDGE, &APP_stopSOS );
      ce:	4a e5       	ldi	r20, 0x5A	; 90
      d0:	50 e0       	ldi	r21, 0x00	; 0
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	0e 94 97 00 	call	0x12e	; 0x12e <BTN_initializationEXIMode>
	BTN_initializationEXIMode( BTN_U8_EXI_1, BTN_U8_EXI_SENSE_FALLING_EDGE, &APP_startSOS );
      da:	46 e5       	ldi	r20, 0x56	; 86
      dc:	50 e0       	ldi	r21, 0x00	; 0
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	0e 94 97 00 	call	0x12e	; 0x12e <BTN_initializationEXIMode>
	LED_initialization( LED_U8_0 );
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 c8 00 	call	0x190	; 0x190 <LED_initialization>
	LED_initialization( LED_U8_1 );
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	0e 94 c8 00 	call	0x190	; 0x190 <LED_initialization>
		
	/* MWL Initialization */
	SOS_init();
      f2:	0e 94 3c 05 	call	0xa78	; 0xa78 <SOS_init>
      f6:	08 95       	ret

000000f8 <APP_startProgram>:
 Description: Function to Start the basic flow of the Application. 
*/
void APP_startProgram  (void)
{
	/* Create Tasks */
	SOS_create_task( APP_taskToggleLED0, 0, 300, &u8_gs_task1Id );
      f8:	21 e6       	ldi	r18, 0x61	; 97
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	4c e2       	ldi	r20, 0x2C	; 44
      fe:	51 e0       	ldi	r21, 0x01	; 1
     100:	60 e0       	ldi	r22, 0x00	; 0
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	8d e5       	ldi	r24, 0x5D	; 93
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 79 05 	call	0xaf2	; 0xaf2 <SOS_create_task>
	SOS_create_task( APP_taskToggleLED1, 5, 500, &u8_gs_task2Id );
     10c:	20 e6       	ldi	r18, 0x60	; 96
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	44 ef       	ldi	r20, 0xF4	; 244
     112:	51 e0       	ldi	r21, 0x01	; 1
     114:	65 e0       	ldi	r22, 0x05	; 5
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	82 e6       	ldi	r24, 0x62	; 98
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <SOS_create_task>
	
	/* Loop: Until Start BTN is pressed */
	while ( u8_g_startFlag == APP_U8_FLAG_DOWN );
     120:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <u8_g_startFlag>
     124:	88 23       	and	r24, r24
     126:	e1 f3       	breq	.-8      	; 0x120 <APP_startProgram+0x28>
		
	/* Start OS */
	SOS_run();
     128:	0e 94 cd 05 	call	0xb9a	; 0xb9a <SOS_run>
     12c:	ff cf       	rjmp	.-2      	; 0x12c <APP_startProgram+0x34>

0000012e <BTN_initializationEXIMode>:
 Input: u8 EXIId, u8 EXISenseControl, and Pointer to Function that takes void and returns void
 Output: u8 Error or No Error
 Description: Function to initialize BTN pin in EXI Mode.
*/
u8 BTN_initializationEXIMode( u8 u8_a_EXIId, u8 u8_a_EXISenseControl, void ( *pf_a_EXIAction ) ( void ) )
{
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
		
	/* Check 1: EXIId and EXISenseControl are in the valid range, and Pointer to Function is not equal to NULL */
	if ( ( u8_a_EXIId <= BTN_U8_EXI_2 ) && ( u8_a_EXISenseControl <= BTN_U8_EXI_SENSE_RISING_EDGE ) && ( pf_a_EXIAction != NULL ) )
     136:	83 30       	cpi	r24, 0x03	; 3
     138:	f8 f4       	brcc	.+62     	; 0x178 <BTN_initializationEXIMode+0x4a>
     13a:	62 30       	cpi	r22, 0x02	; 2
     13c:	f8 f4       	brcc	.+62     	; 0x17c <BTN_initializationEXIMode+0x4e>
     13e:	41 15       	cp	r20, r1
     140:	51 05       	cpc	r21, r1
     142:	f1 f0       	breq	.+60     	; 0x180 <BTN_initializationEXIMode+0x52>
     144:	8a 01       	movw	r16, r20
     146:	d6 2f       	mov	r29, r22
     148:	c8 2f       	mov	r28, r24
	{
		/* Step 1: Enable GLI peripheral */
		GLI_enableGIE();
     14a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLI_enableGIE>
		
		/* Step 2: Set the CallBack Function and Enable the EXI peripheral */
		EXI_intSetCallBack( u8_a_EXIId, pf_a_EXIAction );
     14e:	b8 01       	movw	r22, r16
     150:	8c 2f       	mov	r24, r28
     152:	0e 94 59 03 	call	0x6b2	; 0x6b2 <EXI_intSetCallBack>
		/* Step 2: Enable Pull-up internal resistor */
// 		DIO_write( D, P2, HIGH );
// 		DIO_write( D, P3, HIGH );		
		
		/* Check 1.1: Required EXISenseControl */
		switch( u8_a_EXISenseControl )
     156:	dd 23       	and	r29, r29
     158:	19 f0       	breq	.+6      	; 0x160 <BTN_initializationEXIMode+0x32>
     15a:	d1 30       	cpi	r29, 0x01	; 1
     15c:	39 f0       	breq	.+14     	; 0x16c <BTN_initializationEXIMode+0x3e>
     15e:	12 c0       	rjmp	.+36     	; 0x184 <BTN_initializationEXIMode+0x56>
		{
			case BTN_U8_EXI_SENSE_FALLING_EDGE: EXI_enablePIE( u8_a_EXIId, EXI_U8_SENSE_FALLING_EDGE ); break;
     160:	62 e0       	ldi	r22, 0x02	; 2
     162:	8c 2f       	mov	r24, r28
     164:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <EXI_enablePIE>
 Description: Function to initialize BTN pin in EXI Mode.
*/
u8 BTN_initializationEXIMode( u8 u8_a_EXIId, u8 u8_a_EXISenseControl, void ( *pf_a_EXIAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     168:	81 e0       	ldi	r24, 0x01	; 1
// 		DIO_write( D, P3, HIGH );		
		
		/* Check 1.1: Required EXISenseControl */
		switch( u8_a_EXISenseControl )
		{
			case BTN_U8_EXI_SENSE_FALLING_EDGE: EXI_enablePIE( u8_a_EXIId, EXI_U8_SENSE_FALLING_EDGE ); break;
     16a:	0d c0       	rjmp	.+26     	; 0x186 <BTN_initializationEXIMode+0x58>
			case BTN_U8_EXI_SENSE_RISING_EDGE : EXI_enablePIE( u8_a_EXIId, EXI_U8_SENSE_RISING_EDGE  ); break;		
     16c:	63 e0       	ldi	r22, 0x03	; 3
     16e:	8c 2f       	mov	r24, r28
     170:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <EXI_enablePIE>
 Description: Function to initialize BTN pin in EXI Mode.
*/
u8 BTN_initializationEXIMode( u8 u8_a_EXIId, u8 u8_a_EXISenseControl, void ( *pf_a_EXIAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     174:	81 e0       	ldi	r24, 0x01	; 1
		
		/* Check 1.1: Required EXISenseControl */
		switch( u8_a_EXISenseControl )
		{
			case BTN_U8_EXI_SENSE_FALLING_EDGE: EXI_enablePIE( u8_a_EXIId, EXI_U8_SENSE_FALLING_EDGE ); break;
			case BTN_U8_EXI_SENSE_RISING_EDGE : EXI_enablePIE( u8_a_EXIId, EXI_U8_SENSE_RISING_EDGE  ); break;		
     176:	07 c0       	rjmp	.+14     	; 0x186 <BTN_initializationEXIMode+0x58>
	}
	/* Check 2: EXIId or EXISenseControl is not in the valid range, or Pointer to Function is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong EXIId or EXISenseControl, or Pointer to Function is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	05 c0       	rjmp	.+10     	; 0x186 <BTN_initializationEXIMode+0x58>
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	03 c0       	rjmp	.+6      	; 0x186 <BTN_initializationEXIMode+0x58>
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	01 c0       	rjmp	.+2      	; 0x186 <BTN_initializationEXIMode+0x58>
 Description: Function to initialize BTN pin in EXI Mode.
*/
u8 BTN_initializationEXIMode( u8 u8_a_EXIId, u8 u8_a_EXISenseControl, void ( *pf_a_EXIAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     184:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong EXIId or EXISenseControl, or Pointer to Function is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
	}
			
	return u8_l_errorState;
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	0f 91       	pop	r16
     18e:	08 95       	ret

00000190 <LED_initialization>:
 Input: u8 LedId
 Output: u8 Error or No Error
 Description: Function to initialize LED peripheral.
*/
u8 LED_initialization( u8 u8_a_ledId )
{
     190:	cf 93       	push	r28
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
		
	/* Check 1: LEDId is in the valid range */
	if ( u8_a_ledId <= LED_U8_7 )
     192:	88 30       	cpi	r24, 0x08	; 8
     194:	68 f4       	brcc	.+26     	; 0x1b0 <LED_initialization+0x20>
     196:	c8 2f       	mov	r28, r24
	{
		DIO_init  ( LED_U8_PORT, u8_a_ledId, OUT );
     198:	41 e0       	ldi	r20, 0x01	; 1
     19a:	68 2f       	mov	r22, r24
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_init>
		DIO_write ( LED_U8_PORT, u8_a_ledId, LOW );
     1a2:	40 e0       	ldi	r20, 0x00	; 0
     1a4:	6c 2f       	mov	r22, r28
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to initialize LED peripheral.
*/
u8 LED_initialization( u8 u8_a_ledId )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <LED_initialization+0x22>
	}
	/* Check 2: LEDId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong LEDId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     1b0:	80 e0       	ldi	r24, 0x00	; 0
	}
		
	return Loc_u8ErrorState;
}
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <LED_setLEDPin>:
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
		
	/* Check 1: LEDId and Operation are in the valid range */
	if ( ( u8_a_ledId <= LED_U8_7 ) && ( u8_a_operation <= LED_U8_TOGGLE ) )
     1b6:	88 30       	cpi	r24, 0x08	; 8
     1b8:	08 f0       	brcs	.+2      	; 0x1bc <LED_setLEDPin+0x6>
     1ba:	c9 c0       	rjmp	.+402    	; 0x34e <LED_setLEDPin+0x198>
     1bc:	63 30       	cpi	r22, 0x03	; 3
     1be:	08 f0       	brcs	.+2      	; 0x1c2 <LED_setLEDPin+0xc>
     1c0:	c8 c0       	rjmp	.+400    	; 0x352 <LED_setLEDPin+0x19c>
	{
		/* Check 1.1: Required Operation */
		switch ( u8_a_operation )
     1c2:	61 30       	cpi	r22, 0x01	; 1
     1c4:	09 f4       	brne	.+2      	; 0x1c8 <LED_setLEDPin+0x12>
     1c6:	47 c0       	rjmp	.+142    	; 0x256 <LED_setLEDPin+0xa0>
     1c8:	20 f0       	brcs	.+8      	; 0x1d2 <LED_setLEDPin+0x1c>
     1ca:	62 30       	cpi	r22, 0x02	; 2
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <LED_setLEDPin+0x1a>
     1ce:	85 c0       	rjmp	.+266    	; 0x2da <LED_setLEDPin+0x124>
     1d0:	c2 c0       	rjmp	.+388    	; 0x356 <LED_setLEDPin+0x1a0>
		{
			case LED_U8_ON:
				/* Check 1.1.1: Required LEDId */
				switch ( u8_a_ledId )
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	88 30       	cpi	r24, 0x08	; 8
     1d6:	91 05       	cpc	r25, r1
     1d8:	08 f0       	brcs	.+2      	; 0x1dc <LED_setLEDPin+0x26>
     1da:	bf c0       	rjmp	.+382    	; 0x35a <LED_setLEDPin+0x1a4>
     1dc:	fc 01       	movw	r30, r24
     1de:	e6 5d       	subi	r30, 0xD6	; 214
     1e0:	ff 4f       	sbci	r31, 0xFF	; 255
     1e2:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__tablejump2__>
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
     1e6:	41 e0       	ldi	r20, 0x01	; 1
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
		{
			case LED_U8_ON:
				/* Check 1.1.1: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
     1f2:	08 95       	ret
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
     1f4:	41 e0       	ldi	r20, 0x01	; 1
     1f6:	61 e0       	ldi	r22, 0x01	; 1
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
			case LED_U8_ON:
				/* Check 1.1.1: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
     200:	08 95       	ret
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
     202:	41 e0       	ldi	r20, 0x01	; 1
     204:	62 e0       	ldi	r22, 0x02	; 2
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     20c:	81 e0       	ldi	r24, 0x01	; 1
				/* Check 1.1.1: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
     20e:	08 95       	ret
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, HIGH ); break;
     210:	41 e0       	ldi	r20, 0x01	; 1
     212:	63 e0       	ldi	r22, 0x03	; 3
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     21a:	81 e0       	ldi	r24, 0x01	; 1
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, HIGH ); break;
     21c:	08 95       	ret
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, HIGH ); break;
     21e:	41 e0       	ldi	r20, 0x01	; 1
     220:	64 e0       	ldi	r22, 0x04	; 4
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     228:	81 e0       	ldi	r24, 0x01	; 1
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, HIGH ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, HIGH ); break;
     22a:	08 95       	ret
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, HIGH ); break;
     22c:	41 e0       	ldi	r20, 0x01	; 1
     22e:	65 e0       	ldi	r22, 0x05	; 5
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     236:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, HIGH ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, HIGH ); break;
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, HIGH ); break;
     238:	08 95       	ret
					case LED_U8_6: DIO_write( LED_U8_PORT, LED_U8_6_PIN, HIGH ); break;
     23a:	41 e0       	ldi	r20, 0x01	; 1
     23c:	66 e0       	ldi	r22, 0x06	; 6
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     244:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, HIGH ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, HIGH ); break;
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, HIGH ); break;
					case LED_U8_6: DIO_write( LED_U8_PORT, LED_U8_6_PIN, HIGH ); break;
     246:	08 95       	ret
					case LED_U8_7: DIO_write( LED_U8_PORT, LED_U8_7_PIN, HIGH ); break;
     248:	41 e0       	ldi	r20, 0x01	; 1
     24a:	67 e0       	ldi	r22, 0x07	; 7
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     252:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, HIGH ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, HIGH ); break;
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, HIGH ); break;
					case LED_U8_6: DIO_write( LED_U8_PORT, LED_U8_6_PIN, HIGH ); break;
					case LED_U8_7: DIO_write( LED_U8_PORT, LED_U8_7_PIN, HIGH ); break;
     254:	08 95       	ret
				}				
			break;
			
			case LED_U8_OFF:
				/* Check 1.1.2: Required LEDId */
				switch ( u8_a_ledId )
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	88 30       	cpi	r24, 0x08	; 8
     25a:	91 05       	cpc	r25, r1
     25c:	08 f0       	brcs	.+2      	; 0x260 <LED_setLEDPin+0xaa>
     25e:	7f c0       	rjmp	.+254    	; 0x35e <LED_setLEDPin+0x1a8>
     260:	fc 01       	movw	r30, r24
     262:	ee 5c       	subi	r30, 0xCE	; 206
     264:	ff 4f       	sbci	r31, 0xFF	; 255
     266:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__tablejump2__>
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
     26a:	40 e0       	ldi	r20, 0x00	; 0
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     274:	81 e0       	ldi	r24, 0x01	; 1
			
			case LED_U8_OFF:
				/* Check 1.1.2: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
     276:	08 95       	ret
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     282:	81 e0       	ldi	r24, 0x01	; 1
			case LED_U8_OFF:
				/* Check 1.1.2: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
     284:	08 95       	ret
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
     286:	40 e0       	ldi	r20, 0x00	; 0
     288:	62 e0       	ldi	r22, 0x02	; 2
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     290:	81 e0       	ldi	r24, 0x01	; 1
				/* Check 1.1.2: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
     292:	08 95       	ret
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, LOW ); break;
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	63 e0       	ldi	r22, 0x03	; 3
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     29e:	81 e0       	ldi	r24, 0x01	; 1
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, LOW ); break;
     2a0:	08 95       	ret
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, LOW ); break;
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	64 e0       	ldi	r22, 0x04	; 4
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, LOW ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, LOW ); break;
     2ae:	08 95       	ret
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, LOW ); break;
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	65 e0       	ldi	r22, 0x05	; 5
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, LOW ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, LOW ); break;
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, LOW ); break;
     2bc:	08 95       	ret
					case LED_U8_6: DIO_write( LED_U8_PORT, LED_U8_6_PIN, LOW ); break;
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	66 e0       	ldi	r22, 0x06	; 6
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, LOW ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, LOW ); break;
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, LOW ); break;
					case LED_U8_6: DIO_write( LED_U8_PORT, LED_U8_6_PIN, LOW ); break;
     2ca:	08 95       	ret
					case LED_U8_7: DIO_write( LED_U8_PORT, LED_U8_7_PIN, LOW ); break;
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	67 e0       	ldi	r22, 0x07	; 7
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, LOW ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, LOW ); break;
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, LOW ); break;
					case LED_U8_6: DIO_write( LED_U8_PORT, LED_U8_6_PIN, LOW ); break;
					case LED_U8_7: DIO_write( LED_U8_PORT, LED_U8_7_PIN, LOW ); break;
     2d8:	08 95       	ret
				}				
			break;
			
			case LED_U8_TOGGLE:
				/* Check 1.1.3: Required LEDId */
				switch ( u8_a_ledId )
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	88 30       	cpi	r24, 0x08	; 8
     2de:	91 05       	cpc	r25, r1
     2e0:	08 f0       	brcs	.+2      	; 0x2e4 <LED_setLEDPin+0x12e>
     2e2:	3f c0       	rjmp	.+126    	; 0x362 <LED_setLEDPin+0x1ac>
     2e4:	fc 01       	movw	r30, r24
     2e6:	e6 5c       	subi	r30, 0xC6	; 198
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__tablejump2__>
				{
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
			
			case LED_U8_TOGGLE:
				/* Check 1.1.3: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
     2f8:	08 95       	ret
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     302:	81 e0       	ldi	r24, 0x01	; 1
			case LED_U8_TOGGLE:
				/* Check 1.1.3: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
     304:	08 95       	ret
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
     306:	62 e0       	ldi	r22, 0x02	; 2
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     30e:	81 e0       	ldi	r24, 0x01	; 1
				/* Check 1.1.3: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
     310:	08 95       	ret
					case LED_U8_3: DIO_toggle( LED_U8_PORT, LED_U8_3_PIN ); break;
     312:	63 e0       	ldi	r22, 0x03	; 3
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     31a:	81 e0       	ldi	r24, 0x01	; 1
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
					case LED_U8_3: DIO_toggle( LED_U8_PORT, LED_U8_3_PIN ); break;
     31c:	08 95       	ret
					case LED_U8_4: DIO_toggle( LED_U8_PORT, LED_U8_4_PIN ); break;
     31e:	64 e0       	ldi	r22, 0x04	; 4
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     326:	81 e0       	ldi	r24, 0x01	; 1
				{
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
					case LED_U8_3: DIO_toggle( LED_U8_PORT, LED_U8_3_PIN ); break;
					case LED_U8_4: DIO_toggle( LED_U8_PORT, LED_U8_4_PIN ); break;
     328:	08 95       	ret
					case LED_U8_5: DIO_toggle( LED_U8_PORT, LED_U8_5_PIN ); break;
     32a:	65 e0       	ldi	r22, 0x05	; 5
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     332:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
					case LED_U8_3: DIO_toggle( LED_U8_PORT, LED_U8_3_PIN ); break;
					case LED_U8_4: DIO_toggle( LED_U8_PORT, LED_U8_4_PIN ); break;
					case LED_U8_5: DIO_toggle( LED_U8_PORT, LED_U8_5_PIN ); break;
     334:	08 95       	ret
					case LED_U8_6: DIO_toggle( LED_U8_PORT, LED_U8_6_PIN ); break;
     336:	66 e0       	ldi	r22, 0x06	; 6
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     33e:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
					case LED_U8_3: DIO_toggle( LED_U8_PORT, LED_U8_3_PIN ); break;
					case LED_U8_4: DIO_toggle( LED_U8_PORT, LED_U8_4_PIN ); break;
					case LED_U8_5: DIO_toggle( LED_U8_PORT, LED_U8_5_PIN ); break;
					case LED_U8_6: DIO_toggle( LED_U8_PORT, LED_U8_6_PIN ); break;
     340:	08 95       	ret
					case LED_U8_7: DIO_toggle( LED_U8_PORT, LED_U8_7_PIN ); break;
     342:	67 e0       	ldi	r22, 0x07	; 7
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     34a:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
					case LED_U8_3: DIO_toggle( LED_U8_PORT, LED_U8_3_PIN ); break;
					case LED_U8_4: DIO_toggle( LED_U8_PORT, LED_U8_4_PIN ); break;
					case LED_U8_5: DIO_toggle( LED_U8_PORT, LED_U8_5_PIN ); break;
					case LED_U8_6: DIO_toggle( LED_U8_PORT, LED_U8_6_PIN ); break;
					case LED_U8_7: DIO_toggle( LED_U8_PORT, LED_U8_7_PIN ); break;
     34c:	08 95       	ret
	}
	/* Check 2: LEDId or Operation is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong LEDId or Operation! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	08 95       	ret
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	08 95       	ret
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	08 95       	ret
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	08 95       	ret
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	08 95       	ret
     362:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong LEDId or Operation! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
		
	return Loc_u8ErrorState;
}
     364:	08 95       	ret

00000366 <main>:
// 	SOS_create_task( APP_taskToggleLED1, 5, 500, &u8_gs_task2Id );
// 		
// 	/* Start OS */
// 	SOS_run();
		
	APP_initialization();
     366:	0e 94 67 00 	call	0xce	; 0xce <APP_initialization>
	APP_startProgram();
     36a:	0e 94 7c 00 	call	0xf8	; 0xf8 <APP_startProgram>
	
	return 0;
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	08 95       	ret

00000374 <DIO_init>:
		break;
		case C:
			*pu8_a_returnedData = GET_BIT( DIO_U8_PINC_REG , en_a_pinNumber );
		break;
		case D:
			*pu8_a_returnedData = GET_BIT( DIO_U8_PIND_REG , en_a_pinNumber );
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	11 f1       	breq	.+68     	; 0x3bc <DIO_init+0x48>
     378:	30 f0       	brcs	.+12     	; 0x386 <DIO_init+0x12>
     37a:	82 30       	cpi	r24, 0x02	; 2
     37c:	d1 f1       	breq	.+116    	; 0x3f2 <DIO_init+0x7e>
     37e:	83 30       	cpi	r24, 0x03	; 3
     380:	09 f4       	brne	.+2      	; 0x384 <DIO_init+0x10>
     382:	52 c0       	rjmp	.+164    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     384:	08 95       	ret
     386:	41 30       	cpi	r20, 0x01	; 1
     388:	59 f4       	brne	.+22     	; 0x3a0 <DIO_init+0x2c>
     38a:	2a b3       	in	r18, 0x1a	; 26
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_init+0x22>
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	6a 95       	dec	r22
     398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_init+0x1e>
     39a:	82 2b       	or	r24, r18
     39c:	8a bb       	out	0x1a, r24	; 26
     39e:	08 95       	ret
     3a0:	41 11       	cpse	r20, r1
     3a2:	5c c0       	rjmp	.+184    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     3a4:	2a b3       	in	r18, 0x1a	; 26
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_init+0x3c>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	6a 95       	dec	r22
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_init+0x38>
     3b4:	80 95       	com	r24
     3b6:	82 23       	and	r24, r18
     3b8:	8a bb       	out	0x1a, r24	; 26
     3ba:	08 95       	ret
     3bc:	41 30       	cpi	r20, 0x01	; 1
     3be:	59 f4       	brne	.+22     	; 0x3d6 <DIO_init+0x62>
     3c0:	27 b3       	in	r18, 0x17	; 23
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_init+0x58>
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	6a 95       	dec	r22
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_init+0x54>
     3d0:	82 2b       	or	r24, r18
     3d2:	87 bb       	out	0x17, r24	; 23
     3d4:	08 95       	ret
     3d6:	41 11       	cpse	r20, r1
     3d8:	41 c0       	rjmp	.+130    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     3da:	27 b3       	in	r18, 0x17	; 23
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_init+0x72>
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	6a 95       	dec	r22
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_init+0x6e>
     3ea:	80 95       	com	r24
     3ec:	82 23       	and	r24, r18
     3ee:	87 bb       	out	0x17, r24	; 23
     3f0:	08 95       	ret
     3f2:	41 30       	cpi	r20, 0x01	; 1
     3f4:	59 f4       	brne	.+22     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     3f6:	24 b3       	in	r18, 0x14	; 20
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	6a 95       	dec	r22
     404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_init+0x8a>
     406:	82 2b       	or	r24, r18
     408:	84 bb       	out	0x14, r24	; 20
     40a:	08 95       	ret
     40c:	41 11       	cpse	r20, r1
     40e:	26 c0       	rjmp	.+76     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     410:	24 b3       	in	r18, 0x14	; 20
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	6a 95       	dec	r22
     41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     420:	80 95       	com	r24
     422:	82 23       	and	r24, r18
     424:	84 bb       	out	0x14, r24	; 20
     426:	08 95       	ret
     428:	41 30       	cpi	r20, 0x01	; 1
     42a:	59 f4       	brne	.+22     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     42c:	21 b3       	in	r18, 0x11	; 17
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     434:	88 0f       	add	r24, r24
     436:	99 1f       	adc	r25, r25
     438:	6a 95       	dec	r22
     43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     43c:	82 2b       	or	r24, r18
     43e:	81 bb       	out	0x11, r24	; 17
     440:	08 95       	ret
     442:	41 11       	cpse	r20, r1
     444:	0b c0       	rjmp	.+22     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     446:	21 b3       	in	r18, 0x11	; 17
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     44e:	88 0f       	add	r24, r24
     450:	99 1f       	adc	r25, r25
     452:	6a 95       	dec	r22
     454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     456:	80 95       	com	r24
     458:	82 23       	and	r24, r18
     45a:	81 bb       	out	0x11, r24	; 17
     45c:	08 95       	ret

0000045e <DIO_write>:
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	11 f1       	breq	.+68     	; 0x4a6 <DIO_write+0x48>
     462:	30 f0       	brcs	.+12     	; 0x470 <DIO_write+0x12>
     464:	82 30       	cpi	r24, 0x02	; 2
     466:	d1 f1       	breq	.+116    	; 0x4dc <DIO_write+0x7e>
     468:	83 30       	cpi	r24, 0x03	; 3
     46a:	09 f4       	brne	.+2      	; 0x46e <DIO_write+0x10>
     46c:	52 c0       	rjmp	.+164    	; 0x512 <DIO_write+0xb4>
     46e:	08 95       	ret
     470:	41 30       	cpi	r20, 0x01	; 1
     472:	59 f4       	brne	.+22     	; 0x48a <DIO_write+0x2c>
     474:	2b b3       	in	r18, 0x1b	; 27
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_write+0x22>
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	6a 95       	dec	r22
     482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_write+0x1e>
     484:	82 2b       	or	r24, r18
     486:	8b bb       	out	0x1b, r24	; 27
     488:	08 95       	ret
     48a:	41 11       	cpse	r20, r1
     48c:	5c c0       	rjmp	.+184    	; 0x546 <DIO_write+0xe8>
     48e:	2b b3       	in	r18, 0x1b	; 27
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_write+0x3c>
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	6a 95       	dec	r22
     49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_write+0x38>
     49e:	80 95       	com	r24
     4a0:	82 23       	and	r24, r18
     4a2:	8b bb       	out	0x1b, r24	; 27
     4a4:	08 95       	ret
     4a6:	41 30       	cpi	r20, 0x01	; 1
     4a8:	59 f4       	brne	.+22     	; 0x4c0 <DIO_write+0x62>
     4aa:	28 b3       	in	r18, 0x18	; 24
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_write+0x58>
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	6a 95       	dec	r22
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_write+0x54>
     4ba:	82 2b       	or	r24, r18
     4bc:	88 bb       	out	0x18, r24	; 24
     4be:	08 95       	ret
     4c0:	41 11       	cpse	r20, r1
     4c2:	41 c0       	rjmp	.+130    	; 0x546 <DIO_write+0xe8>
     4c4:	28 b3       	in	r18, 0x18	; 24
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_write+0x72>
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	6a 95       	dec	r22
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_write+0x6e>
     4d4:	80 95       	com	r24
     4d6:	82 23       	and	r24, r18
     4d8:	88 bb       	out	0x18, r24	; 24
     4da:	08 95       	ret
     4dc:	41 30       	cpi	r20, 0x01	; 1
     4de:	59 f4       	brne	.+22     	; 0x4f6 <DIO_write+0x98>
     4e0:	25 b3       	in	r18, 0x15	; 21
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_write+0x8e>
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	6a 95       	dec	r22
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_write+0x8a>
     4f0:	82 2b       	or	r24, r18
     4f2:	85 bb       	out	0x15, r24	; 21
     4f4:	08 95       	ret
     4f6:	41 11       	cpse	r20, r1
     4f8:	26 c0       	rjmp	.+76     	; 0x546 <DIO_write+0xe8>
     4fa:	25 b3       	in	r18, 0x15	; 21
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_write+0xa8>
     502:	88 0f       	add	r24, r24
     504:	99 1f       	adc	r25, r25
     506:	6a 95       	dec	r22
     508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_write+0xa4>
     50a:	80 95       	com	r24
     50c:	82 23       	and	r24, r18
     50e:	85 bb       	out	0x15, r24	; 21
     510:	08 95       	ret
     512:	41 30       	cpi	r20, 0x01	; 1
     514:	59 f4       	brne	.+22     	; 0x52c <DIO_write+0xce>
     516:	22 b3       	in	r18, 0x12	; 18
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_write+0xc4>
     51e:	88 0f       	add	r24, r24
     520:	99 1f       	adc	r25, r25
     522:	6a 95       	dec	r22
     524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_write+0xc0>
     526:	82 2b       	or	r24, r18
     528:	82 bb       	out	0x12, r24	; 18
     52a:	08 95       	ret
     52c:	41 11       	cpse	r20, r1
     52e:	0b c0       	rjmp	.+22     	; 0x546 <DIO_write+0xe8>
     530:	22 b3       	in	r18, 0x12	; 18
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_write+0xde>
     538:	88 0f       	add	r24, r24
     53a:	99 1f       	adc	r25, r25
     53c:	6a 95       	dec	r22
     53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_write+0xda>
     540:	80 95       	com	r24
     542:	82 23       	and	r24, r18
     544:	82 bb       	out	0x12, r24	; 18
     546:	08 95       	ret

00000548 <DIO_toggle>:
 Output: void
 Description: Function to toggle Pin value.
*/
void DIO_toggle ( EN_DIO_PortNumber en_a_portNumber, EN_DIO_PinNumber en_a_pinNumber )
{
	switch(en_a_portNumber)
     548:	81 30       	cpi	r24, 0x01	; 1
     54a:	89 f0       	breq	.+34     	; 0x56e <DIO_toggle+0x26>
     54c:	28 f0       	brcs	.+10     	; 0x558 <DIO_toggle+0x10>
     54e:	82 30       	cpi	r24, 0x02	; 2
     550:	c9 f0       	breq	.+50     	; 0x584 <DIO_toggle+0x3c>
     552:	83 30       	cpi	r24, 0x03	; 3
     554:	11 f1       	breq	.+68     	; 0x59a <DIO_toggle+0x52>
     556:	08 95       	ret
	{
		case A:
			TOG_BIT( DIO_U8_PORTA_REG , en_a_pinNumber );
     558:	2b b3       	in	r18, 0x1b	; 27
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_toggle+0x1c>
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	6a 95       	dec	r22
     566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_toggle+0x18>
     568:	82 27       	eor	r24, r18
     56a:	8b bb       	out	0x1b, r24	; 27
		break;
     56c:	08 95       	ret
		case B:
			TOG_BIT( DIO_U8_PORTB_REG , en_a_pinNumber );
     56e:	28 b3       	in	r18, 0x18	; 24
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_toggle+0x32>
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	6a 95       	dec	r22
     57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_toggle+0x2e>
     57e:	82 27       	eor	r24, r18
     580:	88 bb       	out	0x18, r24	; 24
		break;
     582:	08 95       	ret
		case C:
			TOG_BIT( DIO_U8_PORTC_REG , en_a_pinNumber );
     584:	25 b3       	in	r18, 0x15	; 21
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	02 c0       	rjmp	.+4      	; 0x590 <DIO_toggle+0x48>
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	6a 95       	dec	r22
     592:	e2 f7       	brpl	.-8      	; 0x58c <DIO_toggle+0x44>
     594:	82 27       	eor	r24, r18
     596:	85 bb       	out	0x15, r24	; 21
		break;
     598:	08 95       	ret
		case D:
			TOG_BIT( DIO_U8_PORTD_REG , en_a_pinNumber );
     59a:	22 b3       	in	r18, 0x12	; 18
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_toggle+0x5e>
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	6a 95       	dec	r22
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_toggle+0x5a>
     5aa:	82 27       	eor	r24, r18
     5ac:	82 bb       	out	0x12, r24	; 18
     5ae:	08 95       	ret

000005b0 <EXI_enablePIE>:
		/* Update error state = NOK, wrong InterruptId! */
		u8_l_errorState = STD_TYPES_OK;
	}
	
	return u8_l_errorState;
}
     5b0:	83 30       	cpi	r24, 0x03	; 3
     5b2:	08 f0       	brcs	.+2      	; 0x5b6 <EXI_enablePIE+0x6>
     5b4:	72 c0       	rjmp	.+228    	; 0x69a <EXI_enablePIE+0xea>
     5b6:	64 30       	cpi	r22, 0x04	; 4
     5b8:	08 f0       	brcs	.+2      	; 0x5bc <EXI_enablePIE+0xc>
     5ba:	71 c0       	rjmp	.+226    	; 0x69e <EXI_enablePIE+0xee>
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	81 f1       	breq	.+96     	; 0x620 <EXI_enablePIE+0x70>
     5c0:	20 f0       	brcs	.+8      	; 0x5ca <EXI_enablePIE+0x1a>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <EXI_enablePIE+0x18>
     5c6:	57 c0       	rjmp	.+174    	; 0x676 <EXI_enablePIE+0xc6>
     5c8:	6c c0       	rjmp	.+216    	; 0x6a2 <EXI_enablePIE+0xf2>
     5ca:	8b b7       	in	r24, 0x3b	; 59
     5cc:	80 64       	ori	r24, 0x40	; 64
     5ce:	8b bf       	out	0x3b, r24	; 59
     5d0:	61 30       	cpi	r22, 0x01	; 1
     5d2:	71 f0       	breq	.+28     	; 0x5f0 <EXI_enablePIE+0x40>
     5d4:	28 f0       	brcs	.+10     	; 0x5e0 <EXI_enablePIE+0x30>
     5d6:	62 30       	cpi	r22, 0x02	; 2
     5d8:	99 f0       	breq	.+38     	; 0x600 <EXI_enablePIE+0x50>
     5da:	63 30       	cpi	r22, 0x03	; 3
     5dc:	c9 f0       	breq	.+50     	; 0x610 <EXI_enablePIE+0x60>
     5de:	63 c0       	rjmp	.+198    	; 0x6a6 <EXI_enablePIE+0xf6>
     5e0:	85 b7       	in	r24, 0x35	; 53
     5e2:	8e 7f       	andi	r24, 0xFE	; 254
     5e4:	85 bf       	out	0x35, r24	; 53
     5e6:	85 b7       	in	r24, 0x35	; 53
     5e8:	8d 7f       	andi	r24, 0xFD	; 253
     5ea:	85 bf       	out	0x35, r24	; 53
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	08 95       	ret
     5f0:	85 b7       	in	r24, 0x35	; 53
     5f2:	81 60       	ori	r24, 0x01	; 1
     5f4:	85 bf       	out	0x35, r24	; 53
     5f6:	85 b7       	in	r24, 0x35	; 53
     5f8:	8d 7f       	andi	r24, 0xFD	; 253
     5fa:	85 bf       	out	0x35, r24	; 53
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	08 95       	ret
     600:	85 b7       	in	r24, 0x35	; 53
     602:	8e 7f       	andi	r24, 0xFE	; 254
     604:	85 bf       	out	0x35, r24	; 53
     606:	85 b7       	in	r24, 0x35	; 53
     608:	82 60       	ori	r24, 0x02	; 2
     60a:	85 bf       	out	0x35, r24	; 53
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret
     610:	85 b7       	in	r24, 0x35	; 53
     612:	81 60       	ori	r24, 0x01	; 1
     614:	85 bf       	out	0x35, r24	; 53
     616:	85 b7       	in	r24, 0x35	; 53
     618:	82 60       	ori	r24, 0x02	; 2
     61a:	85 bf       	out	0x35, r24	; 53
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	08 95       	ret
     620:	8b b7       	in	r24, 0x3b	; 59
     622:	80 68       	ori	r24, 0x80	; 128
     624:	8b bf       	out	0x3b, r24	; 59
     626:	61 30       	cpi	r22, 0x01	; 1
     628:	71 f0       	breq	.+28     	; 0x646 <EXI_enablePIE+0x96>
     62a:	28 f0       	brcs	.+10     	; 0x636 <EXI_enablePIE+0x86>
     62c:	62 30       	cpi	r22, 0x02	; 2
     62e:	99 f0       	breq	.+38     	; 0x656 <EXI_enablePIE+0xa6>
     630:	63 30       	cpi	r22, 0x03	; 3
     632:	c9 f0       	breq	.+50     	; 0x666 <EXI_enablePIE+0xb6>
     634:	3a c0       	rjmp	.+116    	; 0x6aa <EXI_enablePIE+0xfa>
     636:	85 b7       	in	r24, 0x35	; 53
     638:	8b 7f       	andi	r24, 0xFB	; 251
     63a:	85 bf       	out	0x35, r24	; 53
     63c:	85 b7       	in	r24, 0x35	; 53
     63e:	87 7f       	andi	r24, 0xF7	; 247
     640:	85 bf       	out	0x35, r24	; 53
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	08 95       	ret
     646:	85 b7       	in	r24, 0x35	; 53
     648:	84 60       	ori	r24, 0x04	; 4
     64a:	85 bf       	out	0x35, r24	; 53
     64c:	85 b7       	in	r24, 0x35	; 53
     64e:	87 7f       	andi	r24, 0xF7	; 247
     650:	85 bf       	out	0x35, r24	; 53
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	08 95       	ret
     656:	85 b7       	in	r24, 0x35	; 53
     658:	8b 7f       	andi	r24, 0xFB	; 251
     65a:	85 bf       	out	0x35, r24	; 53
     65c:	85 b7       	in	r24, 0x35	; 53
     65e:	88 60       	ori	r24, 0x08	; 8
     660:	85 bf       	out	0x35, r24	; 53
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	08 95       	ret
     666:	85 b7       	in	r24, 0x35	; 53
     668:	84 60       	ori	r24, 0x04	; 4
     66a:	85 bf       	out	0x35, r24	; 53
     66c:	85 b7       	in	r24, 0x35	; 53
     66e:	88 60       	ori	r24, 0x08	; 8
     670:	85 bf       	out	0x35, r24	; 53
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	08 95       	ret
     676:	8b b7       	in	r24, 0x3b	; 59
     678:	80 62       	ori	r24, 0x20	; 32
     67a:	8b bf       	out	0x3b, r24	; 59
     67c:	62 30       	cpi	r22, 0x02	; 2
     67e:	19 f0       	breq	.+6      	; 0x686 <EXI_enablePIE+0xd6>
     680:	63 30       	cpi	r22, 0x03	; 3
     682:	31 f0       	breq	.+12     	; 0x690 <EXI_enablePIE+0xe0>
     684:	14 c0       	rjmp	.+40     	; 0x6ae <EXI_enablePIE+0xfe>
     686:	84 b7       	in	r24, 0x34	; 52
     688:	8f 7b       	andi	r24, 0xBF	; 191
     68a:	84 bf       	out	0x34, r24	; 52
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	08 95       	ret
     690:	84 b7       	in	r24, 0x34	; 52
     692:	80 64       	ori	r24, 0x40	; 64
     694:	84 bf       	out	0x34, r24	; 52
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	08 95       	ret
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	08 95       	ret
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	08 95       	ret
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	08 95       	ret
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	08 95       	ret
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	08 95       	ret
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	08 95       	ret

000006b2 <EXI_intSetCallBack>:
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;

	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if( ( u8_a_interruptId <= EXI_U8_INT2 ) && ( pf_a_interruptAction != NULL ) )
     6b2:	83 30       	cpi	r24, 0x03	; 3
     6b4:	68 f4       	brcc	.+26     	; 0x6d0 <EXI_intSetCallBack+0x1e>
     6b6:	61 15       	cp	r22, r1
     6b8:	71 05       	cpc	r23, r1
     6ba:	61 f0       	breq	.+24     	; 0x6d4 <EXI_intSetCallBack+0x22>
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( INTInterruptAction ) into Global Array of Pointers to Functions ( INTInterruptsAction ) in the passed index ( InterruptId ). */
		void_gs_apfInterrupstAction[u8_a_interruptId] = pf_a_interruptAction;
     6bc:	e8 2f       	mov	r30, r24
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	ee 0f       	add	r30, r30
     6c2:	ff 1f       	adc	r31, r31
     6c4:	ed 59       	subi	r30, 0x9D	; 157
     6c6:	ff 4f       	sbci	r31, 0xFF	; 255
     6c8:	71 83       	std	Z+1, r23	; 0x01
     6ca:	60 83       	st	Z, r22
 	 	 	  the address is passed through a pointer to function ( INTInterruptAction ), and then pass this address to ISR function.
*/
u8 EXI_intSetCallBack( u8 u8_a_interruptId, void ( *pf_a_interruptAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     6cc:	81 e0       	ldi	r24, 0x01	; 1

	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if( ( u8_a_interruptId <= EXI_U8_INT2 ) && ( pf_a_interruptAction != NULL ) )
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( INTInterruptAction ) into Global Array of Pointers to Functions ( INTInterruptsAction ) in the passed index ( InterruptId ). */
		void_gs_apfInterrupstAction[u8_a_interruptId] = pf_a_interruptAction;
     6ce:	08 95       	ret
	}
	/* Check 2: InterruptId is not in the valid range, or Pointer to Function is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong InterruptId, or Pointer to Function is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	08 95       	ret
     6d4:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return u8_l_errorState;
}
     6d6:	08 95       	ret

000006d8 <__vector_1>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT0 */
void __vector_1( void )
{
     6d8:	1f 92       	push	r1
     6da:	0f 92       	push	r0
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	0f 92       	push	r0
     6e0:	11 24       	eor	r1, r1
     6e2:	2f 93       	push	r18
     6e4:	3f 93       	push	r19
     6e6:	4f 93       	push	r20
     6e8:	5f 93       	push	r21
     6ea:	6f 93       	push	r22
     6ec:	7f 93       	push	r23
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	ef 93       	push	r30
     6f8:	ff 93       	push	r31
	/* Check: INT0 index of the Global Array is not equal to NULL */
	if ( void_gs_apfInterrupstAction[EXI_U8_INT0] != NULL )
     6fa:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <void_gs_apfInterrupstAction>
     6fe:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <void_gs_apfInterrupstAction+0x1>
     702:	30 97       	sbiw	r30, 0x00	; 0
     704:	09 f0       	breq	.+2      	; 0x708 <__vector_1+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT0]();
     706:	09 95       	icall
	}	
}
     708:	ff 91       	pop	r31
     70a:	ef 91       	pop	r30
     70c:	bf 91       	pop	r27
     70e:	af 91       	pop	r26
     710:	9f 91       	pop	r25
     712:	8f 91       	pop	r24
     714:	7f 91       	pop	r23
     716:	6f 91       	pop	r22
     718:	5f 91       	pop	r21
     71a:	4f 91       	pop	r20
     71c:	3f 91       	pop	r19
     71e:	2f 91       	pop	r18
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_2>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT1 */
void __vector_2( void )
{
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	2f 93       	push	r18
     736:	3f 93       	push	r19
     738:	4f 93       	push	r20
     73a:	5f 93       	push	r21
     73c:	6f 93       	push	r22
     73e:	7f 93       	push	r23
     740:	8f 93       	push	r24
     742:	9f 93       	push	r25
     744:	af 93       	push	r26
     746:	bf 93       	push	r27
     748:	ef 93       	push	r30
     74a:	ff 93       	push	r31
	/* Check: INT1 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT1] != NULL )
     74c:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <void_gs_apfInterrupstAction+0x2>
     750:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <void_gs_apfInterrupstAction+0x3>
     754:	30 97       	sbiw	r30, 0x00	; 0
     756:	09 f0       	breq	.+2      	; 0x75a <__vector_2+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT1]();
     758:	09 95       	icall
	}	
}
     75a:	ff 91       	pop	r31
     75c:	ef 91       	pop	r30
     75e:	bf 91       	pop	r27
     760:	af 91       	pop	r26
     762:	9f 91       	pop	r25
     764:	8f 91       	pop	r24
     766:	7f 91       	pop	r23
     768:	6f 91       	pop	r22
     76a:	5f 91       	pop	r21
     76c:	4f 91       	pop	r20
     76e:	3f 91       	pop	r19
     770:	2f 91       	pop	r18
     772:	0f 90       	pop	r0
     774:	0f be       	out	0x3f, r0	; 63
     776:	0f 90       	pop	r0
     778:	1f 90       	pop	r1
     77a:	18 95       	reti

0000077c <__vector_3>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT2 */
void __vector_3( void )
{
     77c:	1f 92       	push	r1
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
     786:	2f 93       	push	r18
     788:	3f 93       	push	r19
     78a:	4f 93       	push	r20
     78c:	5f 93       	push	r21
     78e:	6f 93       	push	r22
     790:	7f 93       	push	r23
     792:	8f 93       	push	r24
     794:	9f 93       	push	r25
     796:	af 93       	push	r26
     798:	bf 93       	push	r27
     79a:	ef 93       	push	r30
     79c:	ff 93       	push	r31
	/* Check: INT2 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT2] != NULL )
     79e:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <void_gs_apfInterrupstAction+0x4>
     7a2:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <void_gs_apfInterrupstAction+0x5>
     7a6:	30 97       	sbiw	r30, 0x00	; 0
     7a8:	09 f0       	breq	.+2      	; 0x7ac <__vector_3+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT2]();
     7aa:	09 95       	icall
	}	
}
     7ac:	ff 91       	pop	r31
     7ae:	ef 91       	pop	r30
     7b0:	bf 91       	pop	r27
     7b2:	af 91       	pop	r26
     7b4:	9f 91       	pop	r25
     7b6:	8f 91       	pop	r24
     7b8:	7f 91       	pop	r23
     7ba:	6f 91       	pop	r22
     7bc:	5f 91       	pop	r21
     7be:	4f 91       	pop	r20
     7c0:	3f 91       	pop	r19
     7c2:	2f 91       	pop	r18
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	0f 90       	pop	r0
     7ca:	1f 90       	pop	r1
     7cc:	18 95       	reti

000007ce <GLI_enableGIE>:
 Output: void
 Description: Function to set I bit in SREG, to enable the Global Interrupt Enable (GIE).
*/
void GLI_enableGIE ( void )
{
	SET_BIT( GLI_U8_SREG_REG, GLI_U8_I_BIT );
     7ce:	8f b7       	in	r24, 0x3f	; 63
     7d0:	80 68       	ori	r24, 0x80	; 128
     7d2:	8f bf       	out	0x3f, r24	; 63
     7d4:	08 95       	ret

000007d6 <tmr_Init>:
	gl_cmpb_callBackPtr = g_ptr;
}

void tmr_icu_setCallback(void(*g_ptr)(void))
{
	gl_icu_callBackPtr = g_ptr;
     7d6:	fc 01       	movw	r30, r24
     7d8:	89 2b       	or	r24, r25
     7da:	41 f1       	breq	.+80     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     7dc:	1d bc       	out	0x2d, r1	; 45
     7de:	1c bc       	out	0x2c, r1	; 44
     7e0:	1b bc       	out	0x2b, r1	; 43
     7e2:	1a bc       	out	0x2a, r1	; 42
     7e4:	19 bc       	out	0x29, r1	; 41
     7e6:	18 bc       	out	0x28, r1	; 40
     7e8:	17 bc       	out	0x27, r1	; 39
     7ea:	16 bc       	out	0x26, r1	; 38
     7ec:	8e b5       	in	r24, 0x2e	; 46
     7ee:	91 81       	ldd	r25, Z+1	; 0x01
     7f0:	88 7f       	andi	r24, 0xF8	; 248
     7f2:	89 2b       	or	r24, r25
     7f4:	8e bd       	out	0x2e, r24	; 46
     7f6:	9f b5       	in	r25, 0x2f	; 47
     7f8:	80 81       	ld	r24, Z
     7fa:	9c 7f       	andi	r25, 0xFC	; 252
     7fc:	83 70       	andi	r24, 0x03	; 3
     7fe:	89 2b       	or	r24, r25
     800:	8f bd       	out	0x2f, r24	; 47
     802:	9e b5       	in	r25, 0x2e	; 46
     804:	80 81       	ld	r24, Z
     806:	97 7c       	andi	r25, 0xC7	; 199
     808:	88 71       	andi	r24, 0x18	; 24
     80a:	89 2b       	or	r24, r25
     80c:	8e bd       	out	0x2e, r24	; 46
     80e:	80 81       	ld	r24, Z
     810:	88 23       	and	r24, r24
     812:	11 f0       	breq	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     814:	88 30       	cpi	r24, 0x08	; 8
     816:	19 f4       	brne	.+6      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     818:	8f b5       	in	r24, 0x2f	; 47
     81a:	8c 60       	ori	r24, 0x0C	; 12
     81c:	8f bd       	out	0x2f, r24	; 47
     81e:	89 b7       	in	r24, 0x39	; 57
     820:	92 81       	ldd	r25, Z+2	; 0x02
     822:	83 7c       	andi	r24, 0xC3	; 195
     824:	89 2b       	or	r24, r25
     826:	89 bf       	out	0x39, r24	; 57
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	08 95       	ret
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	08 95       	ret

00000830 <tmr_setTimer>:
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	29 b7       	in	r18, 0x39	; 57
     83a:	24 60       	ori	r18, 0x04	; 4
     83c:	29 bf       	out	0x39, r18	; 57
     83e:	bc 01       	movw	r22, r24
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 7f 07 	call	0xefe	; 0xefe <__floatunsisf>
     848:	6b 01       	movw	r12, r22
     84a:	7c 01       	movw	r14, r24
     84c:	2f e6       	ldi	r18, 0x6F	; 111
     84e:	32 e1       	ldi	r19, 0x12	; 18
     850:	43 e0       	ldi	r20, 0x03	; 3
     852:	51 e4       	ldi	r21, 0x41	; 65
     854:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__cmpsf2>
     858:	88 23       	and	r24, r24
     85a:	dc f4       	brge	.+54     	; 0x892 <__stack+0x33>
     85c:	a7 01       	movw	r20, r14
     85e:	96 01       	movw	r18, r12
     860:	6f e6       	ldi	r22, 0x6F	; 111
     862:	72 e1       	ldi	r23, 0x12	; 18
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	91 e4       	ldi	r25, 0x41	; 65
     868:	0e 94 55 06 	call	0xcaa	; 0xcaa <__subsf3>
     86c:	2f e6       	ldi	r18, 0x6F	; 111
     86e:	32 e1       	ldi	r19, 0x12	; 18
     870:	43 e0       	ldi	r20, 0x03	; 3
     872:	59 e3       	ldi	r21, 0x39	; 57
     874:	0e 94 de 06 	call	0xdbc	; 0xdbc <__divsf3>
     878:	0e 94 c2 06 	call	0xd84	; 0xd84 <ceil>
     87c:	0e 94 50 07 	call	0xea0	; 0xea0 <__fixunssfsi>
     880:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <u16_gl_initial_value+0x1>
     884:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <u16_gl_initial_value>
     888:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <u16_gl_no_overflow+0x1>
     88c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <u16_gl_no_overflow>
     890:	12 c0       	rjmp	.+36     	; 0x8b6 <__stack+0x57>
     892:	2f e6       	ldi	r18, 0x6F	; 111
     894:	32 e1       	ldi	r19, 0x12	; 18
     896:	43 e0       	ldi	r20, 0x03	; 3
     898:	51 e4       	ldi	r21, 0x41	; 65
     89a:	c7 01       	movw	r24, r14
     89c:	b6 01       	movw	r22, r12
     89e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__divsf3>
     8a2:	0e 94 50 07 	call	0xea0	; 0xea0 <__fixunssfsi>
     8a6:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <u16_gl_no_overflow+0x1>
     8aa:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <u16_gl_no_overflow>
     8ae:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <u16_gl_initial_value+0x1>
     8b2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <u16_gl_initial_value>
     8b6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <u16_gl_initial_value>
     8ba:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <u16_gl_initial_value+0x1>
     8be:	9d bd       	out	0x2d, r25	; 45
     8c0:	8c bd       	out	0x2c, r24	; 44
     8c2:	8e b5       	in	r24, 0x2e	; 46
     8c4:	88 7f       	andi	r24, 0xF8	; 248
     8c6:	81 60       	ori	r24, 0x01	; 1
     8c8:	8e bd       	out	0x2e, r24	; 46
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	08 95       	ret

000008d4 <tmr_Stop>:
     8d4:	1e bc       	out	0x2e, r1	; 46
     8d6:	08 95       	ret

000008d8 <tmr_ovf_setCallback>:
     8d8:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <gl_ov_callBackPtr+0x1>
     8dc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <gl_ov_callBackPtr>
     8e0:	08 95       	ret

000008e2 <__vector_9>:
}

ISR_HANDLER(TMR1_OVF)
{
     8e2:	1f 92       	push	r1
     8e4:	0f 92       	push	r0
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	0f 92       	push	r0
     8ea:	11 24       	eor	r1, r1
     8ec:	2f 93       	push	r18
     8ee:	3f 93       	push	r19
     8f0:	4f 93       	push	r20
     8f2:	5f 93       	push	r21
     8f4:	6f 93       	push	r22
     8f6:	7f 93       	push	r23
     8f8:	8f 93       	push	r24
     8fa:	9f 93       	push	r25
     8fc:	af 93       	push	r26
     8fe:	bf 93       	push	r27
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
	if(gl_ov_callBackPtr != NULL)
     904:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <gl_ov_callBackPtr>
     908:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <gl_ov_callBackPtr+0x1>
     90c:	30 97       	sbiw	r30, 0x00	; 0
     90e:	21 f1       	breq	.+72     	; 0x958 <__vector_9+0x76>
	{
		if(u16_gl_no_overflow > 0)
     910:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <u16_gl_no_overflow>
     914:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <u16_gl_no_overflow+0x1>
     918:	21 15       	cp	r18, r1
     91a:	31 05       	cpc	r19, r1
     91c:	b1 f0       	breq	.+44     	; 0x94a <__vector_9+0x68>
		{
			u16_gl_tick++;
     91e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <u16_gl_tick>
     922:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <u16_gl_tick+0x1>
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <u16_gl_tick+0x1>
     92c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <u16_gl_tick>
			if(u16_gl_tick == u16_gl_no_overflow)
     930:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <u16_gl_tick>
     934:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <u16_gl_tick+0x1>
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	69 f4       	brne	.+26     	; 0x958 <__vector_9+0x76>
			{
				gl_ov_callBackPtr();
     93e:	09 95       	icall
				u16_gl_tick = 0; //clear the tick counter again to start new count
     940:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <u16_gl_tick+0x1>
     944:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <u16_gl_tick>
     948:	07 c0       	rjmp	.+14     	; 0x958 <__vector_9+0x76>
			}
		}
		else
		{
			gl_ov_callBackPtr();
     94a:	09 95       	icall
			TCNT1=u16_gl_initial_value;
     94c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <u16_gl_initial_value>
     950:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <u16_gl_initial_value+0x1>
     954:	9d bd       	out	0x2d, r25	; 45
     956:	8c bd       	out	0x2c, r24	; 44
		}
	}
}
     958:	ff 91       	pop	r31
     95a:	ef 91       	pop	r30
     95c:	bf 91       	pop	r27
     95e:	af 91       	pop	r26
     960:	9f 91       	pop	r25
     962:	8f 91       	pop	r24
     964:	7f 91       	pop	r23
     966:	6f 91       	pop	r22
     968:	5f 91       	pop	r21
     96a:	4f 91       	pop	r20
     96c:	3f 91       	pop	r19
     96e:	2f 91       	pop	r18
     970:	0f 90       	pop	r0
     972:	0f be       	out	0x3f, r0	; 63
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti

0000097a <__vector_8>:

ISR_HANDLER(TMR1_CMP_B)
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
     984:	2f 93       	push	r18
     986:	3f 93       	push	r19
     988:	4f 93       	push	r20
     98a:	5f 93       	push	r21
     98c:	6f 93       	push	r22
     98e:	7f 93       	push	r23
     990:	8f 93       	push	r24
     992:	9f 93       	push	r25
     994:	af 93       	push	r26
     996:	bf 93       	push	r27
     998:	ef 93       	push	r30
     99a:	ff 93       	push	r31
	if(gl_cmpb_callBackPtr != NULL)
     99c:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <gl_cmpb_callBackPtr>
     9a0:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <gl_cmpb_callBackPtr+0x1>
     9a4:	30 97       	sbiw	r30, 0x00	; 0
     9a6:	09 f0       	breq	.+2      	; 0x9aa <__vector_8+0x30>
	{
		gl_cmpb_callBackPtr();
     9a8:	09 95       	icall
	}
}
     9aa:	ff 91       	pop	r31
     9ac:	ef 91       	pop	r30
     9ae:	bf 91       	pop	r27
     9b0:	af 91       	pop	r26
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	7f 91       	pop	r23
     9b8:	6f 91       	pop	r22
     9ba:	5f 91       	pop	r21
     9bc:	4f 91       	pop	r20
     9be:	3f 91       	pop	r19
     9c0:	2f 91       	pop	r18
     9c2:	0f 90       	pop	r0
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	0f 90       	pop	r0
     9c8:	1f 90       	pop	r1
     9ca:	18 95       	reti

000009cc <__vector_7>:

ISR_HANDLER(TMR1_CMP_A)
{
     9cc:	1f 92       	push	r1
     9ce:	0f 92       	push	r0
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	0f 92       	push	r0
     9d4:	11 24       	eor	r1, r1
     9d6:	2f 93       	push	r18
     9d8:	3f 93       	push	r19
     9da:	4f 93       	push	r20
     9dc:	5f 93       	push	r21
     9de:	6f 93       	push	r22
     9e0:	7f 93       	push	r23
     9e2:	8f 93       	push	r24
     9e4:	9f 93       	push	r25
     9e6:	af 93       	push	r26
     9e8:	bf 93       	push	r27
     9ea:	ef 93       	push	r30
     9ec:	ff 93       	push	r31
	if(gl_cmpa_callBackPtr != NULL)
     9ee:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <gl_cmpa_callBackPtr>
     9f2:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <gl_cmpa_callBackPtr+0x1>
     9f6:	30 97       	sbiw	r30, 0x00	; 0
     9f8:	09 f0       	breq	.+2      	; 0x9fc <__vector_7+0x30>
	{
		gl_cmpa_callBackPtr();
     9fa:	09 95       	icall
	}
}
     9fc:	ff 91       	pop	r31
     9fe:	ef 91       	pop	r30
     a00:	bf 91       	pop	r27
     a02:	af 91       	pop	r26
     a04:	9f 91       	pop	r25
     a06:	8f 91       	pop	r24
     a08:	7f 91       	pop	r23
     a0a:	6f 91       	pop	r22
     a0c:	5f 91       	pop	r21
     a0e:	4f 91       	pop	r20
     a10:	3f 91       	pop	r19
     a12:	2f 91       	pop	r18
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	0f 90       	pop	r0
     a1a:	1f 90       	pop	r1
     a1c:	18 95       	reti

00000a1e <__vector_6>:

ISR_HANDLER(TMR1_CPT)
{
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	0f 92       	push	r0
     a26:	11 24       	eor	r1, r1
     a28:	2f 93       	push	r18
     a2a:	3f 93       	push	r19
     a2c:	4f 93       	push	r20
     a2e:	5f 93       	push	r21
     a30:	6f 93       	push	r22
     a32:	7f 93       	push	r23
     a34:	8f 93       	push	r24
     a36:	9f 93       	push	r25
     a38:	af 93       	push	r26
     a3a:	bf 93       	push	r27
     a3c:	ef 93       	push	r30
     a3e:	ff 93       	push	r31
	if(gl_icu_callBackPtr != NULL)
     a40:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <gl_icu_callBackPtr>
     a44:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <gl_icu_callBackPtr+0x1>
     a48:	30 97       	sbiw	r30, 0x00	; 0
     a4a:	09 f0       	breq	.+2      	; 0xa4e <__vector_6+0x30>
	{
		gl_icu_callBackPtr();
     a4c:	09 95       	icall
	}
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	0f 90       	pop	r0
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	0f 90       	pop	r0
     a6c:	1f 90       	pop	r1
     a6e:	18 95       	reti

00000a70 <SOS_update>:
	else
	{
		enu_system_status = SOS_STATUS_INVALID;
	}
	return enu_system_status;
}
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <u8_gl_flag>
     a76:	08 95       	ret

00000a78 <SOS_init>:
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <SOS_init+0x6>
     a7e:	1f 92       	push	r1
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	19 82       	std	Y+1, r1	; 0x01
     a86:	1a 82       	std	Y+2, r1	; 0x02
     a88:	84 e0       	ldi	r24, 0x04	; 4
     a8a:	8b 83       	std	Y+3, r24	; 0x03
     a8c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <enu_sos_state>
     a90:	88 23       	and	r24, r24
     a92:	b1 f0       	breq	.+44     	; 0xac0 <SOS_init+0x48>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	27 c0       	rjmp	.+78     	; 0xae6 <SOS_init+0x6e>
     a98:	e8 2f       	mov	r30, r24
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	ee 0f       	add	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	ee 0f       	add	r30, r30
     aa2:	ff 1f       	adc	r31, r31
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	e6 58       	subi	r30, 0x86	; 134
     aaa:	ff 4f       	sbci	r31, 0xFF	; 255
     aac:	11 82       	std	Z+1, r1	; 0x01
     aae:	10 82       	st	Z, r1
     ab0:	13 82       	std	Z+3, r1	; 0x03
     ab2:	12 82       	std	Z+2, r1	; 0x02
     ab4:	15 82       	std	Z+5, r1	; 0x05
     ab6:	14 82       	std	Z+4, r1	; 0x04
     ab8:	16 82       	std	Z+6, r1	; 0x06
     aba:	17 82       	std	Z+7, r1	; 0x07
     abc:	8f 5f       	subi	r24, 0xFF	; 255
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <SOS_init+0x4a>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	8a 30       	cpi	r24, 0x0A	; 10
     ac4:	48 f3       	brcs	.-46     	; 0xa98 <SOS_init+0x20>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <enu_sos_state>
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <tmr_Init>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 18 04 	call	0x830	; 0x830 <tmr_setTimer>
     adc:	88 e3       	ldi	r24, 0x38	; 56
     ade:	95 e0       	ldi	r25, 0x05	; 5
     ae0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <tmr_ovf_setCallback>
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <SOS_create_task>:
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	ec 01       	movw	r28, r24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	01 c0       	rjmp	.+2      	; 0xafe <SOS_create_task+0xc>
     afc:	9f 5f       	subi	r25, 0xFF	; 255
     afe:	a9 2f       	mov	r26, r25
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	fd 01       	movw	r30, r26
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	ee 0f       	add	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	ee 0f       	add	r30, r30
     b0e:	ff 1f       	adc	r31, r31
     b10:	e6 58       	subi	r30, 0x86	; 134
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	01 90       	ld	r0, Z+
     b16:	f0 81       	ld	r31, Z
     b18:	e0 2d       	mov	r30, r0
     b1a:	ef 2b       	or	r30, r31
     b1c:	11 f0       	breq	.+4      	; 0xb22 <SOS_create_task+0x30>
     b1e:	9a 30       	cpi	r25, 0x0A	; 10
     b20:	68 f3       	brcs	.-38     	; 0xafc <SOS_create_task+0xa>
     b22:	9a 30       	cpi	r25, 0x0A	; 10
     b24:	c9 f0       	breq	.+50     	; 0xb58 <SOS_create_task+0x66>
     b26:	aa 0f       	add	r26, r26
     b28:	bb 1f       	adc	r27, r27
     b2a:	aa 0f       	add	r26, r26
     b2c:	bb 1f       	adc	r27, r27
     b2e:	aa 0f       	add	r26, r26
     b30:	bb 1f       	adc	r27, r27
     b32:	a6 58       	subi	r26, 0x86	; 134
     b34:	bf 4f       	sbci	r27, 0xFF	; 255
     b36:	11 96       	adiw	r26, 0x01	; 1
     b38:	dc 93       	st	X, r29
     b3a:	ce 93       	st	-X, r28
     b3c:	13 96       	adiw	r26, 0x03	; 3
     b3e:	7c 93       	st	X, r23
     b40:	6e 93       	st	-X, r22
     b42:	12 97       	sbiw	r26, 0x02	; 2
     b44:	15 96       	adiw	r26, 0x05	; 5
     b46:	5c 93       	st	X, r21
     b48:	4e 93       	st	-X, r20
     b4a:	14 97       	sbiw	r26, 0x04	; 4
     b4c:	16 96       	adiw	r26, 0x06	; 6
     b4e:	9c 93       	st	X, r25
     b50:	f9 01       	movw	r30, r18
     b52:	90 83       	st	Z, r25
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <SOS_create_task+0x68>
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <SOS_delete_task>:
     b60:	e8 2f       	mov	r30, r24
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	df 01       	movw	r26, r30
     b66:	aa 0f       	add	r26, r26
     b68:	bb 1f       	adc	r27, r27
     b6a:	aa 0f       	add	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	aa 0f       	add	r26, r26
     b70:	bb 1f       	adc	r27, r27
     b72:	a6 58       	subi	r26, 0x86	; 134
     b74:	bf 4f       	sbci	r27, 0xFF	; 255
     b76:	8d 91       	ld	r24, X+
     b78:	9c 91       	ld	r25, X
     b7a:	11 97       	sbiw	r26, 0x01	; 1
     b7c:	89 2b       	or	r24, r25
     b7e:	59 f0       	breq	.+22     	; 0xb96 <SOS_delete_task+0x36>
     b80:	fd 01       	movw	r30, r26
     b82:	11 82       	std	Z+1, r1	; 0x01
     b84:	10 82       	st	Z, r1
     b86:	13 82       	std	Z+3, r1	; 0x03
     b88:	12 82       	std	Z+2, r1	; 0x02
     b8a:	15 82       	std	Z+5, r1	; 0x05
     b8c:	14 82       	std	Z+4, r1	; 0x04
     b8e:	16 82       	std	Z+6, r1	; 0x06
     b90:	17 82       	std	Z+7, r1	; 0x07
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	08 95       	ret
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	08 95       	ret

00000b9a <SOS_run>:

	
void SOS_run (void)
{
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
	while (u8_gl_stopFlag != 1)
     ba0:	75 c0       	rjmp	.+234    	; 0xc8c <SOS_run+0xf2>
	{
		u8 u8_l_index=0;
		for(u8_l_index = 0; u8_l_index < SCH_MAX_TASK ; u8_l_index++)
		{
			if(arr_str_task[u8_l_index].enu_task_states == READY)
     ba2:	8c 2f       	mov	r24, r28
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	fc 01       	movw	r30, r24
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	e6 58       	subi	r30, 0x86	; 134
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	27 81       	ldd	r18, Z+7	; 0x07
     bba:	21 30       	cpi	r18, 0x01	; 1
     bbc:	79 f4       	brne	.+30     	; 0xbdc <SOS_run+0x42>
			{
				arr_str_task[u8_l_index].ptr_task();		//run the task
     bbe:	8f 01       	movw	r16, r30
     bc0:	01 90       	ld	r0, Z+
     bc2:	f0 81       	ld	r31, Z
     bc4:	e0 2d       	mov	r30, r0
     bc6:	09 95       	icall
				arr_str_task[u8_l_index].enu_task_states = WAIT;
     bc8:	f8 01       	movw	r30, r16
     bca:	17 82       	std	Z+7, r1	; 0x07
				if(arr_str_task[u8_l_index].period == 0)	//one shot task
     bcc:	84 81       	ldd	r24, Z+4	; 0x04
     bce:	95 81       	ldd	r25, Z+5	; 0x05
     bd0:	89 2b       	or	r24, r25
     bd2:	49 f4       	brne	.+18     	; 0xbe6 <SOS_run+0x4c>
				{
					SOS_delete_task(u8_l_index);			//remove the task from OS database
     bd4:	8c 2f       	mov	r24, r28
     bd6:	0e 94 b0 05 	call	0xb60	; 0xb60 <SOS_delete_task>
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <SOS_run+0x4c>
void SOS_run (void)
{
	while (u8_gl_stopFlag != 1)
	{
		u8 u8_l_index=0;
		for(u8_l_index = 0; u8_l_index < SCH_MAX_TASK ; u8_l_index++)
     bdc:	cf 5f       	subi	r28, 0xFF	; 255
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <SOS_run+0x48>
     be0:	c0 e0       	ldi	r28, 0x00	; 0
     be2:	ca 30       	cpi	r28, 0x0A	; 10
     be4:	f0 f2       	brcs	.-68     	; 0xba2 <SOS_run+0x8>
					SOS_delete_task(u8_l_index);			//remove the task from OS database
				}
				break;
			}
		}
		if(u8_gl_flag == 1)
     be6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <u8_gl_flag>
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	09 f0       	breq	.+2      	; 0xbf0 <SOS_run+0x56>
     bee:	4e c0       	rjmp	.+156    	; 0xc8c <SOS_run+0xf2>
		{
			u8_gl_flag = 0;
     bf0:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <u8_gl_flag>
			for(u8_l_index = 0; u8_l_index < SCH_MAX_TASK ; u8_l_index++)
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	47 c0       	rjmp	.+142    	; 0xc86 <SOS_run+0xec>
			{
				if(arr_str_task[u8_l_index].ptr_task != NULL)
     bf8:	82 2f       	mov	r24, r18
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	fc 01       	movw	r30, r24
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	e6 58       	subi	r30, 0x86	; 134
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	40 81       	ld	r20, Z
     c10:	51 81       	ldd	r21, Z+1	; 0x01
     c12:	45 2b       	or	r20, r21
     c14:	b9 f1       	breq	.+110    	; 0xc84 <SOS_run+0xea>
				{
					if(arr_str_task[u8_l_index].initial_delay == 0)
     c16:	fc 01       	movw	r30, r24
     c18:	ee 0f       	add	r30, r30
     c1a:	ff 1f       	adc	r31, r31
     c1c:	ee 0f       	add	r30, r30
     c1e:	ff 1f       	adc	r31, r31
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	e6 58       	subi	r30, 0x86	; 134
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	42 81       	ldd	r20, Z+2	; 0x02
     c2a:	53 81       	ldd	r21, Z+3	; 0x03
     c2c:	41 15       	cp	r20, r1
     c2e:	51 05       	cpc	r21, r1
     c30:	e1 f4       	brne	.+56     	; 0xc6a <SOS_run+0xd0>
					{
						arr_str_task[u8_l_index].enu_task_states = READY;
     c32:	fc 01       	movw	r30, r24
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	ee 0f       	add	r30, r30
     c3e:	ff 1f       	adc	r31, r31
     c40:	e6 58       	subi	r30, 0x86	; 134
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	31 e0       	ldi	r19, 0x01	; 1
     c46:	37 83       	std	Z+7, r19	; 0x07
						if(arr_str_task[u8_l_index].period > 0)
     c48:	44 81       	ldd	r20, Z+4	; 0x04
     c4a:	55 81       	ldd	r21, Z+5	; 0x05
     c4c:	41 15       	cp	r20, r1
     c4e:	51 05       	cpc	r21, r1
     c50:	c9 f0       	breq	.+50     	; 0xc84 <SOS_run+0xea>
						{
							//Schedule periodic tasks to run again
							arr_str_task[u8_l_index].initial_delay = arr_str_task[u8_l_index].period;
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	fc 01       	movw	r30, r24
     c60:	e6 58       	subi	r30, 0x86	; 134
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	53 83       	std	Z+3, r21	; 0x03
     c66:	42 83       	std	Z+2, r20	; 0x02
     c68:	0d c0       	rjmp	.+26     	; 0xc84 <SOS_run+0xea>
						}
					}
					else
					{
						arr_str_task[u8_l_index].initial_delay--;
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	fc 01       	movw	r30, r24
     c78:	e6 58       	subi	r30, 0x86	; 134
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	41 50       	subi	r20, 0x01	; 1
     c7e:	51 09       	sbc	r21, r1
     c80:	53 83       	std	Z+3, r21	; 0x03
     c82:	42 83       	std	Z+2, r20	; 0x02
			}
		}
		if(u8_gl_flag == 1)
		{
			u8_gl_flag = 0;
			for(u8_l_index = 0; u8_l_index < SCH_MAX_TASK ; u8_l_index++)
     c84:	2f 5f       	subi	r18, 0xFF	; 255
     c86:	2a 30       	cpi	r18, 0x0A	; 10
     c88:	08 f4       	brcc	.+2      	; 0xc8c <SOS_run+0xf2>
     c8a:	b6 cf       	rjmp	.-148    	; 0xbf8 <SOS_run+0x5e>
}

	
void SOS_run (void)
{
	while (u8_gl_stopFlag != 1)
     c8c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <u8_gl_stopFlag>
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	09 f0       	breq	.+2      	; 0xc96 <SOS_run+0xfc>
     c94:	a5 cf       	rjmp	.-182    	; 0xbe0 <SOS_run+0x46>
					}
				}
			}
		}
	}
}
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	08 95       	ret

00000c9e <SOS_disable>:
																
void SOS_disable (void)
{
	//stop timer interrupt
	tmr_Stop();
     c9e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <tmr_Stop>
	u8_gl_stopFlag = 1;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <u8_gl_stopFlag>
     ca8:	08 95       	ret

00000caa <__subsf3>:
     caa:	50 58       	subi	r21, 0x80	; 128

00000cac <__addsf3>:
     cac:	bb 27       	eor	r27, r27
     cae:	aa 27       	eor	r26, r26
     cb0:	0e 94 6d 06 	call	0xcda	; 0xcda <__addsf3x>
     cb4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>
     cb8:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscA>
     cbc:	38 f0       	brcs	.+14     	; 0xccc <__addsf3+0x20>
     cbe:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_pscB>
     cc2:	20 f0       	brcs	.+8      	; 0xccc <__addsf3+0x20>
     cc4:	39 f4       	brne	.+14     	; 0xcd4 <__addsf3+0x28>
     cc6:	9f 3f       	cpi	r25, 0xFF	; 255
     cc8:	19 f4       	brne	.+6      	; 0xcd0 <__addsf3+0x24>
     cca:	26 f4       	brtc	.+8      	; 0xcd4 <__addsf3+0x28>
     ccc:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
     cd0:	0e f4       	brtc	.+2      	; 0xcd4 <__addsf3+0x28>
     cd2:	e0 95       	com	r30
     cd4:	e7 fb       	bst	r30, 7
     cd6:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>

00000cda <__addsf3x>:
     cda:	e9 2f       	mov	r30, r25
     cdc:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_split3>
     ce0:	58 f3       	brcs	.-42     	; 0xcb8 <__addsf3+0xc>
     ce2:	ba 17       	cp	r27, r26
     ce4:	62 07       	cpc	r22, r18
     ce6:	73 07       	cpc	r23, r19
     ce8:	84 07       	cpc	r24, r20
     cea:	95 07       	cpc	r25, r21
     cec:	20 f0       	brcs	.+8      	; 0xcf6 <__addsf3x+0x1c>
     cee:	79 f4       	brne	.+30     	; 0xd0e <__addsf3x+0x34>
     cf0:	a6 f5       	brtc	.+104    	; 0xd5a <__addsf3x+0x80>
     cf2:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__fp_zero>
     cf6:	0e f4       	brtc	.+2      	; 0xcfa <__addsf3x+0x20>
     cf8:	e0 95       	com	r30
     cfa:	0b 2e       	mov	r0, r27
     cfc:	ba 2f       	mov	r27, r26
     cfe:	a0 2d       	mov	r26, r0
     d00:	0b 01       	movw	r0, r22
     d02:	b9 01       	movw	r22, r18
     d04:	90 01       	movw	r18, r0
     d06:	0c 01       	movw	r0, r24
     d08:	ca 01       	movw	r24, r20
     d0a:	a0 01       	movw	r20, r0
     d0c:	11 24       	eor	r1, r1
     d0e:	ff 27       	eor	r31, r31
     d10:	59 1b       	sub	r21, r25
     d12:	99 f0       	breq	.+38     	; 0xd3a <__addsf3x+0x60>
     d14:	59 3f       	cpi	r21, 0xF9	; 249
     d16:	50 f4       	brcc	.+20     	; 0xd2c <__addsf3x+0x52>
     d18:	50 3e       	cpi	r21, 0xE0	; 224
     d1a:	68 f1       	brcs	.+90     	; 0xd76 <__addsf3x+0x9c>
     d1c:	1a 16       	cp	r1, r26
     d1e:	f0 40       	sbci	r31, 0x00	; 0
     d20:	a2 2f       	mov	r26, r18
     d22:	23 2f       	mov	r18, r19
     d24:	34 2f       	mov	r19, r20
     d26:	44 27       	eor	r20, r20
     d28:	58 5f       	subi	r21, 0xF8	; 248
     d2a:	f3 cf       	rjmp	.-26     	; 0xd12 <__addsf3x+0x38>
     d2c:	46 95       	lsr	r20
     d2e:	37 95       	ror	r19
     d30:	27 95       	ror	r18
     d32:	a7 95       	ror	r26
     d34:	f0 40       	sbci	r31, 0x00	; 0
     d36:	53 95       	inc	r21
     d38:	c9 f7       	brne	.-14     	; 0xd2c <__addsf3x+0x52>
     d3a:	7e f4       	brtc	.+30     	; 0xd5a <__addsf3x+0x80>
     d3c:	1f 16       	cp	r1, r31
     d3e:	ba 0b       	sbc	r27, r26
     d40:	62 0b       	sbc	r22, r18
     d42:	73 0b       	sbc	r23, r19
     d44:	84 0b       	sbc	r24, r20
     d46:	ba f0       	brmi	.+46     	; 0xd76 <__addsf3x+0x9c>
     d48:	91 50       	subi	r25, 0x01	; 1
     d4a:	a1 f0       	breq	.+40     	; 0xd74 <__addsf3x+0x9a>
     d4c:	ff 0f       	add	r31, r31
     d4e:	bb 1f       	adc	r27, r27
     d50:	66 1f       	adc	r22, r22
     d52:	77 1f       	adc	r23, r23
     d54:	88 1f       	adc	r24, r24
     d56:	c2 f7       	brpl	.-16     	; 0xd48 <__addsf3x+0x6e>
     d58:	0e c0       	rjmp	.+28     	; 0xd76 <__addsf3x+0x9c>
     d5a:	ba 0f       	add	r27, r26
     d5c:	62 1f       	adc	r22, r18
     d5e:	73 1f       	adc	r23, r19
     d60:	84 1f       	adc	r24, r20
     d62:	48 f4       	brcc	.+18     	; 0xd76 <__addsf3x+0x9c>
     d64:	87 95       	ror	r24
     d66:	77 95       	ror	r23
     d68:	67 95       	ror	r22
     d6a:	b7 95       	ror	r27
     d6c:	f7 95       	ror	r31
     d6e:	9e 3f       	cpi	r25, 0xFE	; 254
     d70:	08 f0       	brcs	.+2      	; 0xd74 <__addsf3x+0x9a>
     d72:	b0 cf       	rjmp	.-160    	; 0xcd4 <__addsf3+0x28>
     d74:	93 95       	inc	r25
     d76:	88 0f       	add	r24, r24
     d78:	08 f0       	brcs	.+2      	; 0xd7c <__addsf3x+0xa2>
     d7a:	99 27       	eor	r25, r25
     d7c:	ee 0f       	add	r30, r30
     d7e:	97 95       	ror	r25
     d80:	87 95       	ror	r24
     d82:	08 95       	ret

00000d84 <ceil>:
     d84:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fp_trunc>
     d88:	90 f0       	brcs	.+36     	; 0xdae <ceil+0x2a>
     d8a:	9f 37       	cpi	r25, 0x7F	; 127
     d8c:	48 f4       	brcc	.+18     	; 0xda0 <ceil+0x1c>
     d8e:	91 11       	cpse	r25, r1
     d90:	16 f4       	brtc	.+4      	; 0xd96 <ceil+0x12>
     d92:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_szero>
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	80 e8       	ldi	r24, 0x80	; 128
     d9c:	9f e3       	ldi	r25, 0x3F	; 63
     d9e:	08 95       	ret
     da0:	26 f0       	brts	.+8      	; 0xdaa <ceil+0x26>
     da2:	1b 16       	cp	r1, r27
     da4:	61 1d       	adc	r22, r1
     da6:	71 1d       	adc	r23, r1
     da8:	81 1d       	adc	r24, r1
     daa:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_mintl>
     dae:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_mpack>

00000db2 <__cmpsf2>:
     db2:	0e 94 bc 07 	call	0xf78	; 0xf78 <__fp_cmp>
     db6:	08 f4       	brcc	.+2      	; 0xdba <__cmpsf2+0x8>
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	08 95       	ret

00000dbc <__divsf3>:
     dbc:	0e 94 f2 06 	call	0xde4	; 0xde4 <__divsf3x>
     dc0:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>
     dc4:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_pscB>
     dc8:	58 f0       	brcs	.+22     	; 0xde0 <__divsf3+0x24>
     dca:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscA>
     dce:	40 f0       	brcs	.+16     	; 0xde0 <__divsf3+0x24>
     dd0:	29 f4       	brne	.+10     	; 0xddc <__divsf3+0x20>
     dd2:	5f 3f       	cpi	r21, 0xFF	; 255
     dd4:	29 f0       	breq	.+10     	; 0xde0 <__divsf3+0x24>
     dd6:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>
     dda:	51 11       	cpse	r21, r1
     ddc:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_szero>
     de0:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>

00000de4 <__divsf3x>:
     de4:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_split3>
     de8:	68 f3       	brcs	.-38     	; 0xdc4 <__divsf3+0x8>

00000dea <__divsf3_pse>:
     dea:	99 23       	and	r25, r25
     dec:	b1 f3       	breq	.-20     	; 0xdda <__divsf3+0x1e>
     dee:	55 23       	and	r21, r21
     df0:	91 f3       	breq	.-28     	; 0xdd6 <__divsf3+0x1a>
     df2:	95 1b       	sub	r25, r21
     df4:	55 0b       	sbc	r21, r21
     df6:	bb 27       	eor	r27, r27
     df8:	aa 27       	eor	r26, r26
     dfa:	62 17       	cp	r22, r18
     dfc:	73 07       	cpc	r23, r19
     dfe:	84 07       	cpc	r24, r20
     e00:	38 f0       	brcs	.+14     	; 0xe10 <__divsf3_pse+0x26>
     e02:	9f 5f       	subi	r25, 0xFF	; 255
     e04:	5f 4f       	sbci	r21, 0xFF	; 255
     e06:	22 0f       	add	r18, r18
     e08:	33 1f       	adc	r19, r19
     e0a:	44 1f       	adc	r20, r20
     e0c:	aa 1f       	adc	r26, r26
     e0e:	a9 f3       	breq	.-22     	; 0xdfa <__divsf3_pse+0x10>
     e10:	35 d0       	rcall	.+106    	; 0xe7c <__divsf3_pse+0x92>
     e12:	0e 2e       	mov	r0, r30
     e14:	3a f0       	brmi	.+14     	; 0xe24 <__divsf3_pse+0x3a>
     e16:	e0 e8       	ldi	r30, 0x80	; 128
     e18:	32 d0       	rcall	.+100    	; 0xe7e <__divsf3_pse+0x94>
     e1a:	91 50       	subi	r25, 0x01	; 1
     e1c:	50 40       	sbci	r21, 0x00	; 0
     e1e:	e6 95       	lsr	r30
     e20:	00 1c       	adc	r0, r0
     e22:	ca f7       	brpl	.-14     	; 0xe16 <__divsf3_pse+0x2c>
     e24:	2b d0       	rcall	.+86     	; 0xe7c <__divsf3_pse+0x92>
     e26:	fe 2f       	mov	r31, r30
     e28:	29 d0       	rcall	.+82     	; 0xe7c <__divsf3_pse+0x92>
     e2a:	66 0f       	add	r22, r22
     e2c:	77 1f       	adc	r23, r23
     e2e:	88 1f       	adc	r24, r24
     e30:	bb 1f       	adc	r27, r27
     e32:	26 17       	cp	r18, r22
     e34:	37 07       	cpc	r19, r23
     e36:	48 07       	cpc	r20, r24
     e38:	ab 07       	cpc	r26, r27
     e3a:	b0 e8       	ldi	r27, 0x80	; 128
     e3c:	09 f0       	breq	.+2      	; 0xe40 <__divsf3_pse+0x56>
     e3e:	bb 0b       	sbc	r27, r27
     e40:	80 2d       	mov	r24, r0
     e42:	bf 01       	movw	r22, r30
     e44:	ff 27       	eor	r31, r31
     e46:	93 58       	subi	r25, 0x83	; 131
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	3a f0       	brmi	.+14     	; 0xe5a <__divsf3_pse+0x70>
     e4c:	9e 3f       	cpi	r25, 0xFE	; 254
     e4e:	51 05       	cpc	r21, r1
     e50:	78 f0       	brcs	.+30     	; 0xe70 <__divsf3_pse+0x86>
     e52:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>
     e56:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_szero>
     e5a:	5f 3f       	cpi	r21, 0xFF	; 255
     e5c:	e4 f3       	brlt	.-8      	; 0xe56 <__divsf3_pse+0x6c>
     e5e:	98 3e       	cpi	r25, 0xE8	; 232
     e60:	d4 f3       	brlt	.-12     	; 0xe56 <__divsf3_pse+0x6c>
     e62:	86 95       	lsr	r24
     e64:	77 95       	ror	r23
     e66:	67 95       	ror	r22
     e68:	b7 95       	ror	r27
     e6a:	f7 95       	ror	r31
     e6c:	9f 5f       	subi	r25, 0xFF	; 255
     e6e:	c9 f7       	brne	.-14     	; 0xe62 <__divsf3_pse+0x78>
     e70:	88 0f       	add	r24, r24
     e72:	91 1d       	adc	r25, r1
     e74:	96 95       	lsr	r25
     e76:	87 95       	ror	r24
     e78:	97 f9       	bld	r25, 7
     e7a:	08 95       	ret
     e7c:	e1 e0       	ldi	r30, 0x01	; 1
     e7e:	66 0f       	add	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	88 1f       	adc	r24, r24
     e84:	bb 1f       	adc	r27, r27
     e86:	62 17       	cp	r22, r18
     e88:	73 07       	cpc	r23, r19
     e8a:	84 07       	cpc	r24, r20
     e8c:	ba 07       	cpc	r27, r26
     e8e:	20 f0       	brcs	.+8      	; 0xe98 <__divsf3_pse+0xae>
     e90:	62 1b       	sub	r22, r18
     e92:	73 0b       	sbc	r23, r19
     e94:	84 0b       	sbc	r24, r20
     e96:	ba 0b       	sbc	r27, r26
     e98:	ee 1f       	adc	r30, r30
     e9a:	88 f7       	brcc	.-30     	; 0xe7e <__divsf3_pse+0x94>
     e9c:	e0 95       	com	r30
     e9e:	08 95       	ret

00000ea0 <__fixunssfsi>:
     ea0:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
     ea4:	88 f0       	brcs	.+34     	; 0xec8 <__fixunssfsi+0x28>
     ea6:	9f 57       	subi	r25, 0x7F	; 127
     ea8:	98 f0       	brcs	.+38     	; 0xed0 <__fixunssfsi+0x30>
     eaa:	b9 2f       	mov	r27, r25
     eac:	99 27       	eor	r25, r25
     eae:	b7 51       	subi	r27, 0x17	; 23
     eb0:	b0 f0       	brcs	.+44     	; 0xede <__fixunssfsi+0x3e>
     eb2:	e1 f0       	breq	.+56     	; 0xeec <__fixunssfsi+0x4c>
     eb4:	66 0f       	add	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	88 1f       	adc	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	1a f0       	brmi	.+6      	; 0xec4 <__fixunssfsi+0x24>
     ebe:	ba 95       	dec	r27
     ec0:	c9 f7       	brne	.-14     	; 0xeb4 <__fixunssfsi+0x14>
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <__fixunssfsi+0x4c>
     ec4:	b1 30       	cpi	r27, 0x01	; 1
     ec6:	91 f0       	breq	.+36     	; 0xeec <__fixunssfsi+0x4c>
     ec8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fp_zero>
     ecc:	b1 e0       	ldi	r27, 0x01	; 1
     ece:	08 95       	ret
     ed0:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__fp_zero>
     ed4:	67 2f       	mov	r22, r23
     ed6:	78 2f       	mov	r23, r24
     ed8:	88 27       	eor	r24, r24
     eda:	b8 5f       	subi	r27, 0xF8	; 248
     edc:	39 f0       	breq	.+14     	; 0xeec <__fixunssfsi+0x4c>
     ede:	b9 3f       	cpi	r27, 0xF9	; 249
     ee0:	cc f3       	brlt	.-14     	; 0xed4 <__fixunssfsi+0x34>
     ee2:	86 95       	lsr	r24
     ee4:	77 95       	ror	r23
     ee6:	67 95       	ror	r22
     ee8:	b3 95       	inc	r27
     eea:	d9 f7       	brne	.-10     	; 0xee2 <__fixunssfsi+0x42>
     eec:	3e f4       	brtc	.+14     	; 0xefc <__fixunssfsi+0x5c>
     eee:	90 95       	com	r25
     ef0:	80 95       	com	r24
     ef2:	70 95       	com	r23
     ef4:	61 95       	neg	r22
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	08 95       	ret

00000efe <__floatunsisf>:
     efe:	e8 94       	clt
     f00:	09 c0       	rjmp	.+18     	; 0xf14 <__floatsisf+0x12>

00000f02 <__floatsisf>:
     f02:	97 fb       	bst	r25, 7
     f04:	3e f4       	brtc	.+14     	; 0xf14 <__floatsisf+0x12>
     f06:	90 95       	com	r25
     f08:	80 95       	com	r24
     f0a:	70 95       	com	r23
     f0c:	61 95       	neg	r22
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	99 23       	and	r25, r25
     f16:	a9 f0       	breq	.+42     	; 0xf42 <__floatsisf+0x40>
     f18:	f9 2f       	mov	r31, r25
     f1a:	96 e9       	ldi	r25, 0x96	; 150
     f1c:	bb 27       	eor	r27, r27
     f1e:	93 95       	inc	r25
     f20:	f6 95       	lsr	r31
     f22:	87 95       	ror	r24
     f24:	77 95       	ror	r23
     f26:	67 95       	ror	r22
     f28:	b7 95       	ror	r27
     f2a:	f1 11       	cpse	r31, r1
     f2c:	f8 cf       	rjmp	.-16     	; 0xf1e <__floatsisf+0x1c>
     f2e:	fa f4       	brpl	.+62     	; 0xf6e <__floatsisf+0x6c>
     f30:	bb 0f       	add	r27, r27
     f32:	11 f4       	brne	.+4      	; 0xf38 <__floatsisf+0x36>
     f34:	60 ff       	sbrs	r22, 0
     f36:	1b c0       	rjmp	.+54     	; 0xf6e <__floatsisf+0x6c>
     f38:	6f 5f       	subi	r22, 0xFF	; 255
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	8f 4f       	sbci	r24, 0xFF	; 255
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	16 c0       	rjmp	.+44     	; 0xf6e <__floatsisf+0x6c>
     f42:	88 23       	and	r24, r24
     f44:	11 f0       	breq	.+4      	; 0xf4a <__floatsisf+0x48>
     f46:	96 e9       	ldi	r25, 0x96	; 150
     f48:	11 c0       	rjmp	.+34     	; 0xf6c <__floatsisf+0x6a>
     f4a:	77 23       	and	r23, r23
     f4c:	21 f0       	breq	.+8      	; 0xf56 <__floatsisf+0x54>
     f4e:	9e e8       	ldi	r25, 0x8E	; 142
     f50:	87 2f       	mov	r24, r23
     f52:	76 2f       	mov	r23, r22
     f54:	05 c0       	rjmp	.+10     	; 0xf60 <__floatsisf+0x5e>
     f56:	66 23       	and	r22, r22
     f58:	71 f0       	breq	.+28     	; 0xf76 <__floatsisf+0x74>
     f5a:	96 e8       	ldi	r25, 0x86	; 134
     f5c:	86 2f       	mov	r24, r22
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	2a f0       	brmi	.+10     	; 0xf6e <__floatsisf+0x6c>
     f64:	9a 95       	dec	r25
     f66:	66 0f       	add	r22, r22
     f68:	77 1f       	adc	r23, r23
     f6a:	88 1f       	adc	r24, r24
     f6c:	da f7       	brpl	.-10     	; 0xf64 <__floatsisf+0x62>
     f6e:	88 0f       	add	r24, r24
     f70:	96 95       	lsr	r25
     f72:	87 95       	ror	r24
     f74:	97 f9       	bld	r25, 7
     f76:	08 95       	ret

00000f78 <__fp_cmp>:
     f78:	99 0f       	add	r25, r25
     f7a:	00 08       	sbc	r0, r0
     f7c:	55 0f       	add	r21, r21
     f7e:	aa 0b       	sbc	r26, r26
     f80:	e0 e8       	ldi	r30, 0x80	; 128
     f82:	fe ef       	ldi	r31, 0xFE	; 254
     f84:	16 16       	cp	r1, r22
     f86:	17 06       	cpc	r1, r23
     f88:	e8 07       	cpc	r30, r24
     f8a:	f9 07       	cpc	r31, r25
     f8c:	c0 f0       	brcs	.+48     	; 0xfbe <__fp_cmp+0x46>
     f8e:	12 16       	cp	r1, r18
     f90:	13 06       	cpc	r1, r19
     f92:	e4 07       	cpc	r30, r20
     f94:	f5 07       	cpc	r31, r21
     f96:	98 f0       	brcs	.+38     	; 0xfbe <__fp_cmp+0x46>
     f98:	62 1b       	sub	r22, r18
     f9a:	73 0b       	sbc	r23, r19
     f9c:	84 0b       	sbc	r24, r20
     f9e:	95 0b       	sbc	r25, r21
     fa0:	39 f4       	brne	.+14     	; 0xfb0 <__fp_cmp+0x38>
     fa2:	0a 26       	eor	r0, r26
     fa4:	61 f0       	breq	.+24     	; 0xfbe <__fp_cmp+0x46>
     fa6:	23 2b       	or	r18, r19
     fa8:	24 2b       	or	r18, r20
     faa:	25 2b       	or	r18, r21
     fac:	21 f4       	brne	.+8      	; 0xfb6 <__fp_cmp+0x3e>
     fae:	08 95       	ret
     fb0:	0a 26       	eor	r0, r26
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <__fp_cmp+0x3e>
     fb4:	a1 40       	sbci	r26, 0x01	; 1
     fb6:	a6 95       	lsr	r26
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
     fba:	81 1d       	adc	r24, r1
     fbc:	81 1d       	adc	r24, r1
     fbe:	08 95       	ret

00000fc0 <__fp_inf>:
     fc0:	97 f9       	bld	r25, 7
     fc2:	9f 67       	ori	r25, 0x7F	; 127
     fc4:	80 e8       	ldi	r24, 0x80	; 128
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	08 95       	ret

00000fcc <__fp_mintl>:
     fcc:	88 23       	and	r24, r24
     fce:	71 f4       	brne	.+28     	; 0xfec <__fp_mintl+0x20>
     fd0:	77 23       	and	r23, r23
     fd2:	21 f0       	breq	.+8      	; 0xfdc <__fp_mintl+0x10>
     fd4:	98 50       	subi	r25, 0x08	; 8
     fd6:	87 2b       	or	r24, r23
     fd8:	76 2f       	mov	r23, r22
     fda:	07 c0       	rjmp	.+14     	; 0xfea <__fp_mintl+0x1e>
     fdc:	66 23       	and	r22, r22
     fde:	11 f4       	brne	.+4      	; 0xfe4 <__fp_mintl+0x18>
     fe0:	99 27       	eor	r25, r25
     fe2:	0d c0       	rjmp	.+26     	; 0xffe <__fp_mintl+0x32>
     fe4:	90 51       	subi	r25, 0x10	; 16
     fe6:	86 2b       	or	r24, r22
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	2a f0       	brmi	.+10     	; 0xff8 <__fp_mintl+0x2c>
     fee:	9a 95       	dec	r25
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	da f7       	brpl	.-10     	; 0xfee <__fp_mintl+0x22>
     ff8:	88 0f       	add	r24, r24
     ffa:	96 95       	lsr	r25
     ffc:	87 95       	ror	r24
     ffe:	97 f9       	bld	r25, 7
    1000:	08 95       	ret

00001002 <__fp_mpack>:
    1002:	9f 3f       	cpi	r25, 0xFF	; 255
    1004:	31 f0       	breq	.+12     	; 0x1012 <__fp_mpack_finite+0xc>

00001006 <__fp_mpack_finite>:
    1006:	91 50       	subi	r25, 0x01	; 1
    1008:	20 f4       	brcc	.+8      	; 0x1012 <__fp_mpack_finite+0xc>
    100a:	87 95       	ror	r24
    100c:	77 95       	ror	r23
    100e:	67 95       	ror	r22
    1010:	b7 95       	ror	r27
    1012:	88 0f       	add	r24, r24
    1014:	91 1d       	adc	r25, r1
    1016:	96 95       	lsr	r25
    1018:	87 95       	ror	r24
    101a:	97 f9       	bld	r25, 7
    101c:	08 95       	ret

0000101e <__fp_nan>:
    101e:	9f ef       	ldi	r25, 0xFF	; 255
    1020:	80 ec       	ldi	r24, 0xC0	; 192
    1022:	08 95       	ret

00001024 <__fp_pscA>:
    1024:	00 24       	eor	r0, r0
    1026:	0a 94       	dec	r0
    1028:	16 16       	cp	r1, r22
    102a:	17 06       	cpc	r1, r23
    102c:	18 06       	cpc	r1, r24
    102e:	09 06       	cpc	r0, r25
    1030:	08 95       	ret

00001032 <__fp_pscB>:
    1032:	00 24       	eor	r0, r0
    1034:	0a 94       	dec	r0
    1036:	12 16       	cp	r1, r18
    1038:	13 06       	cpc	r1, r19
    103a:	14 06       	cpc	r1, r20
    103c:	05 06       	cpc	r0, r21
    103e:	08 95       	ret

00001040 <__fp_round>:
    1040:	09 2e       	mov	r0, r25
    1042:	03 94       	inc	r0
    1044:	00 0c       	add	r0, r0
    1046:	11 f4       	brne	.+4      	; 0x104c <__fp_round+0xc>
    1048:	88 23       	and	r24, r24
    104a:	52 f0       	brmi	.+20     	; 0x1060 <__fp_round+0x20>
    104c:	bb 0f       	add	r27, r27
    104e:	40 f4       	brcc	.+16     	; 0x1060 <__fp_round+0x20>
    1050:	bf 2b       	or	r27, r31
    1052:	11 f4       	brne	.+4      	; 0x1058 <__fp_round+0x18>
    1054:	60 ff       	sbrs	r22, 0
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <__fp_round+0x20>
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	08 95       	ret

00001062 <__fp_split3>:
    1062:	57 fd       	sbrc	r21, 7
    1064:	90 58       	subi	r25, 0x80	; 128
    1066:	44 0f       	add	r20, r20
    1068:	55 1f       	adc	r21, r21
    106a:	59 f0       	breq	.+22     	; 0x1082 <__fp_splitA+0x10>
    106c:	5f 3f       	cpi	r21, 0xFF	; 255
    106e:	71 f0       	breq	.+28     	; 0x108c <__fp_splitA+0x1a>
    1070:	47 95       	ror	r20

00001072 <__fp_splitA>:
    1072:	88 0f       	add	r24, r24
    1074:	97 fb       	bst	r25, 7
    1076:	99 1f       	adc	r25, r25
    1078:	61 f0       	breq	.+24     	; 0x1092 <__fp_splitA+0x20>
    107a:	9f 3f       	cpi	r25, 0xFF	; 255
    107c:	79 f0       	breq	.+30     	; 0x109c <__fp_splitA+0x2a>
    107e:	87 95       	ror	r24
    1080:	08 95       	ret
    1082:	12 16       	cp	r1, r18
    1084:	13 06       	cpc	r1, r19
    1086:	14 06       	cpc	r1, r20
    1088:	55 1f       	adc	r21, r21
    108a:	f2 cf       	rjmp	.-28     	; 0x1070 <__fp_split3+0xe>
    108c:	46 95       	lsr	r20
    108e:	f1 df       	rcall	.-30     	; 0x1072 <__fp_splitA>
    1090:	08 c0       	rjmp	.+16     	; 0x10a2 <__fp_splitA+0x30>
    1092:	16 16       	cp	r1, r22
    1094:	17 06       	cpc	r1, r23
    1096:	18 06       	cpc	r1, r24
    1098:	99 1f       	adc	r25, r25
    109a:	f1 cf       	rjmp	.-30     	; 0x107e <__fp_splitA+0xc>
    109c:	86 95       	lsr	r24
    109e:	71 05       	cpc	r23, r1
    10a0:	61 05       	cpc	r22, r1
    10a2:	08 94       	sec
    10a4:	08 95       	ret

000010a6 <__fp_trunc>:
    10a6:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
    10aa:	a0 f0       	brcs	.+40     	; 0x10d4 <__fp_trunc+0x2e>
    10ac:	be e7       	ldi	r27, 0x7E	; 126
    10ae:	b9 17       	cp	r27, r25
    10b0:	88 f4       	brcc	.+34     	; 0x10d4 <__fp_trunc+0x2e>
    10b2:	bb 27       	eor	r27, r27
    10b4:	9f 38       	cpi	r25, 0x8F	; 143
    10b6:	60 f4       	brcc	.+24     	; 0x10d0 <__fp_trunc+0x2a>
    10b8:	16 16       	cp	r1, r22
    10ba:	b1 1d       	adc	r27, r1
    10bc:	67 2f       	mov	r22, r23
    10be:	78 2f       	mov	r23, r24
    10c0:	88 27       	eor	r24, r24
    10c2:	98 5f       	subi	r25, 0xF8	; 248
    10c4:	f7 cf       	rjmp	.-18     	; 0x10b4 <__fp_trunc+0xe>
    10c6:	86 95       	lsr	r24
    10c8:	77 95       	ror	r23
    10ca:	67 95       	ror	r22
    10cc:	b1 1d       	adc	r27, r1
    10ce:	93 95       	inc	r25
    10d0:	96 39       	cpi	r25, 0x96	; 150
    10d2:	c8 f3       	brcs	.-14     	; 0x10c6 <__fp_trunc+0x20>
    10d4:	08 95       	ret

000010d6 <__fp_zero>:
    10d6:	e8 94       	clt

000010d8 <__fp_szero>:
    10d8:	bb 27       	eor	r27, r27
    10da:	66 27       	eor	r22, r22
    10dc:	77 27       	eor	r23, r23
    10de:	cb 01       	movw	r24, r22
    10e0:	97 f9       	bld	r25, 7
    10e2:	08 95       	ret

000010e4 <__tablejump2__>:
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	05 90       	lpm	r0, Z+
    10ea:	f4 91       	lpm	r31, Z
    10ec:	e0 2d       	mov	r30, r0
    10ee:	09 94       	ijmp

000010f0 <_exit>:
    10f0:	f8 94       	cli

000010f2 <__stop_program>:
    10f2:	ff cf       	rjmp	.-2      	; 0x10f2 <__stop_program>
